Index: chatkitlight/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.library'\napply plugin: 'com.github.dcendents.android-maven'\ngroup = 'com.github.hamidrezaamz'\n\nandroid {\n\n    compileSdkVersion 29\n    buildToolsVersion \"29.0.3\"\n\n    defaultConfig {\n        minSdkVersion 21\n        targetSdkVersion 29\n        versionCode 26\n        versionName \"3.0.4\"\n        vectorDrawables.useSupportLibrary = true\n\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n        consumerProguardFiles 'consumer-rules.pro'\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n    }\n\n    compileOptions {\n        sourceCompatibility = 1.8\n        targetCompatibility = 1.8\n\n        dataBinding {\n            enabled = true\n        }\n\n        sourceSets {\n            main {\n                res.srcDirs =\n                        [\n                                'src/main/res/layouts/av',\n                                'src/main/res/layouts/lawone',\n                                'src/main/res/layouts/general',\n                                'src/main/res'\n                        ]\n            }\n        }\n    }\n\n    dependencies {\n\n        implementation fileTree(dir: 'libs', include: ['*.jar'])\n\n        def lifecycle_version = \"2.2.0\"\n\n        // google\n        implementation 'androidx.appcompat:appcompat:1.2.0'\n        implementation 'androidx.legacy:legacy-support-v4:1.0.0'\n        implementation 'com.google.android.material:material:1.2.1'\n        implementation 'androidx.constraintlayout:constraintlayout:2.0.2'\n        implementation \"androidx.recyclerview:recyclerview:1.2.0-alpha06\"\n\n        // live data - view model\n        implementation \"androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version\"\n        implementation \"androidx.lifecycle:lifecycle-livedata:$lifecycle_version\"\n        implementation \"androidx.lifecycle:lifecycle-extensions:$lifecycle_version\"\n        implementation \"androidx.lifecycle:lifecycle-common-java8:$lifecycle_version\"\n\n        // chat multimedia\n        implementation \"com.github.bumptech.glide:glide:4.11.0\"\n        implementation 'me.itangqi.waveloadingview:library:0.3.5'\n        implementation 'com.mani:ThinDownloadManager:1.4.0'\n        implementation 'com.github.alxrm:audiowave-progressbar:0.9.2'\n\n        // repository\n        api \"androidx.paging:paging-runtime:2.1.2\"\n        api \"androidx.room:room-runtime:2.2.5\"\n        api 'com.github.orangegangsters:swipy:1.2.0@aar'\n\n        // recorder view\n        api 'com.devlomi.record-view:record-view:2.0.1'\n\n        // annotations\n        annotationProcessor \"androidx.room:room-compiler:2.2.5\"\n\n        // test\n        testImplementation 'junit:junit:4.13'\n        androidTestImplementation 'androidx.test.ext:junit:1.1.2'\n        androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chatkitlight/build.gradle	(revision 465eff28d3ea9c4b49a9a1186a90321f70e45200)
+++ chatkitlight/build.gradle	(date 1610537274000)
@@ -10,8 +10,8 @@
     defaultConfig {
         minSdkVersion 21
         targetSdkVersion 29
-        versionCode 26
-        versionName "3.0.4"
+        versionCode 16
+        versionName "2.0.43"
         vectorDrawables.useSupportLibrary = true
 
         testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
Index: chatkitlight/src/main/res/layouts/av/layout/lawone_conversation_client_audio.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\">\n\n    <data>\n\n        <import type=\"android.view.View\" />\n\n        <import type=\"ir.vasl.chatkitlight.utils.TimeUtils\" />\n\n        <import\n            alias=\"status\"\n            type=\"ir.vasl.chatkitlight.utils.globalEnums.ConversationStatus\" />\n\n        <variable\n            name=\"conversationModel\"\n            type=\"ir.vasl.chatkitlight.model.ConversationModel\" />\n\n        <variable\n            name=\"conversationListListener\"\n            type=\"ir.vasl.chatkitlight.ui.callback.ConversationListListener\" />\n\n        <variable\n            name=\"isPlaying\"\n            type=\"boolean\" />\n\n    </data>\n\n    <RelativeLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:onClick=\"@{() -> conversationListListener.onConversationItemClicked(conversationModel)}\"\n        android:padding=\"@dimen/global_padding\">\n\n        <RelativeLayout\n            android:id=\"@+id/linearLayour_bubble\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_alignParentRight=\"true\">\n\n            <RelativeLayout\n                style=\"@style/ChatBubbleStyle\"\n                android:layout_alignParentRight=\"true\"\n                android:background=\"@drawable/lawone_shape_curve_client\"\n                android:gravity=\"right\"\n                android:minWidth=\"@dimen/conversation_min_width\">\n\n                <FrameLayout\n                    android:id=\"@+id/frameLayoutFile\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_toLeftOf=\"@id/wave\"\n                    android:layout_centerVertical=\"true\"\n                    android:layout_marginLeft=\"@dimen/global_margin_middle\"\n                    android:padding=\"2dp\">\n\n                    <View\n                        android:layout_width=\"@dimen/icon_circle_size\"\n                        android:layout_height=\"@dimen/icon_circle_size\"\n                        android:background=\"@drawable/shape_rounded_yellow\" />\n\n                    <androidx.appcompat.widget.AppCompatImageView\n                        android:id=\"@+id/imageView_play\"\n                        android:layout_width=\"@dimen/icon_circle_size\"\n                        android:layout_height=\"@dimen/icon_circle_size\"\n                        android:background=\"?attr/selectableItemBackgroundBorderless\"\n                        android:padding=\"10dp\"\n                        android:scaleType=\"centerInside\"\n                        android:src=\"@{isPlaying ? @drawable/ic_pause : @drawable/ic_play}\" />\n\n                    <ProgressBar\n                        android:id=\"@+id/progressbar_loading\"\n                        android:layout_width=\"@dimen/icon_circle_size\"\n                        android:layout_height=\"@dimen/icon_circle_size\"\n                        android:indeterminate=\"true\"\n                        android:indeterminateTintMode=\"src_atop\"\n                        android:indeterminateTint=\"@color/warm_grey_five\"\n                        android:visibility=\"@{conversationModel.conversationStatus == status.SENDING  ? View.VISIBLE : View.GONE}\" />\n\n                </FrameLayout>\n\n                <rm.com.audiowave.AudioWaveView\n                    android:id=\"@+id/wave\"\n                    android:layout_width=\"150dp\"\n                    android:layout_height=\"32dp\"\n                    android:layout_centerVertical=\"true\"\n                    android:layout_marginRight=\"@dimen/avatar_circle_size\"\n                    android:layout_alignParentRight=\"true\"\n                    android:layout_marginLeft=\"@dimen/global_margin_extra\"\n                    app:animateExpansion=\"false\"\n                    app:chunkHeight=\"28dp\"\n                    app:chunkRadius=\"1dp\"\n                    app:chunkSpacing=\"2dp\"\n                    app:chunkWidth=\"3dp\"\n                    app:minChunkHeight=\"2dp\"\n                    app:touchable=\"false\"\n                    app:waveColor=\"@color/lawone_yellow\" />\n\n            </RelativeLayout>\n\n            <ir.vasl.chatkitlight.ui.customview.ImageViewCustom\n                android:id=\"@+id/imageView_avatar\"\n                style=\"@style/AvatarStyle\"\n                bannerImage=\"@{conversationModel.imageUrl}\"\n                android:layout_alignParentRight=\"true\"\n                app:round_image=\"true\" />\n\n        </RelativeLayout>\n\n        <me.itangqi.waveloadingview.WaveLoadingView\n            android:id=\"@+id/waveView\"\n            android:layout_width=\"@dimen/download_circle_size\"\n            android:layout_height=\"@dimen/download_circle_size\"\n            android:layout_alignParentRight=\"true\"\n            android:layout_marginTop=\"12.5dp\"\n            android:layout_marginRight=\"10dp\"\n            android:visibility=\"gone\"\n            app:wlv_borderColor=\"@color/white\"\n            app:wlv_borderWidth=\"3dp\"\n            app:wlv_progressValue=\"0\"\n            app:wlv_round_rectangle=\"true\"\n            app:wlv_shapeType=\"circle\"\n            app:wlv_titleCenter=\"@string/download\"\n            app:wlv_titleCenterColor=\"@color/white\"\n            app:wlv_titleCenterSize=\"12sp\"\n            app:wlv_triangle_direction=\"north\"\n            app:wlv_waveAmplitude=\"85\"\n            app:wlv_waveColor=\"@color/red\" />\n\n        <androidx.appcompat.widget.AppCompatImageView\n            android:id=\"@+id/imageView_checkmark\"\n            android:layout_width=\"@dimen/avatar_circle_size\"\n            android:layout_height=\"@dimen/avatar_circle_size\"\n            android:layout_alignParentRight=\"true\"\n            android:layout_marginTop=\"12.5dp\"\n            android:layout_marginRight=\"10dp\"\n            android:scaleType=\"centerInside\"\n            android:visibility=\"gone\"\n            app:srcCompat=\"@drawable/checkmark_gray\" />\n\n        <include\n            layout=\"@layout/lawone_tilted_icon\"\n            android:visibility=\"gone\" />\n\n        <LinearLayout\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_below=\"@id/linearLayour_bubble\"\n            android:layout_marginRight=\"@dimen/avatar_circle_size_half\"\n            android:layout_marginLeft=\"@dimen/avatar_circle_size_half\"\n            android:gravity=\"right|center_vertical\"\n            android:layout_alignParentRight=\"true\"\n            android:layoutDirection=\"rtl\"\n            android:orientation=\"horizontal\">\n\n            <androidx.appcompat.widget.AppCompatImageView\n                android:id=\"@+id/image\"\n                style=\"@style/TextViewSubTitleStyle\"\n                conversationStatusIcon=\"@{conversationModel.conversationStatus}\"\n                android:layout_width=\"15dp\"\n                android:layout_height=\"15dp\"\n                android:tint=\"@color/warm_grey_three\"\n                android:visibility='@{ conversationModel.conversationStatus.equals(null) ? View.GONE : View.VISIBLE  }' />\n\n            <TextView\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginStart=\"@dimen/global_margin\"\n                android:layout_marginEnd=\"@dimen/global_margin\"\n                android:text=\"@{conversationModel.time}\"\n                android:textColor=\"@color/warm_grey_three\"\n                android:textSize=\"12sp\"\n                android:visibility='@{conversationModel.time.equals(\"\") ? View.GONE : View.VISIBLE }' />\n\n        </LinearLayout>\n\n    </RelativeLayout>\n\n</layout>\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chatkitlight/src/main/res/layouts/av/layout/lawone_conversation_client_audio.xml	(revision 465eff28d3ea9c4b49a9a1186a90321f70e45200)
+++ chatkitlight/src/main/res/layouts/av/layout/lawone_conversation_client_audio.xml	(date 1610537273000)
@@ -105,8 +105,17 @@
                 android:layout_alignParentRight="true"
                 app:round_image="true" />
 
-        </RelativeLayout>
+            </RelativeLayout>
 
+            <ir.vasl.chatkitlight.ui.customview.ImageViewCustom
+                android:id="@+id/imageView_avatar"
+                style="@style/AvatarStyle"
+                bannerImage="@{conversationModel.imageUrl}"
+                android:layout_alignParentRight="true"
+                app:round_image="true" />
+
+        </RelativeLayout>
+
         <me.itangqi.waveloadingview.WaveLoadingView
             android:id="@+id/waveView"
             android:layout_width="@dimen/download_circle_size"
Index: chatkitlight/src/main/res/layouts/lawone/layout/lawone_conversation_client.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\">\n\n    <data>\n\n        <import type=\"android.view.View\" />\n\n        <import type=\"ir.vasl.chatkitlight.utils.TimeUtils\" />\n\n        <variable\n            name=\"conversationModel\"\n            type=\"ir.vasl.chatkitlight.model.ConversationModel\" />\n\n        <variable\n            name=\"conversationListListener\"\n            type=\"ir.vasl.chatkitlight.ui.callback.ConversationListListener\" />\n\n    </data>\n\n    <RelativeLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:onClick=\"@{() -> conversationListListener.onConversationItemClicked(conversationModel)}\"\n        android:padding=\"@dimen/global_padding\">\n\n        <RelativeLayout\n            android:id=\"@+id/linearLayout_bubble\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_alignParentRight=\"true\"\n            android:minWidth=\"@dimen/conversation_min_width\">\n\n            <RelativeLayout\n                style=\"@style/ChatBubbleStyle\"\n                android:layout_alignParentRight=\"true\"\n                android:background=\"@drawable/lawone_shape_curve_client\"\n                android:gravity=\"right\">\n\n                <include\n                    layout=\"@layout/lawone_tilted_icon\"\n                    android:visibility=\"gone\" />\n\n                <TextView\n                    android:id=\"@+id/textView_title\"\n                    style=\"@style/TextViewClientTitleStyle\"\n                    android:text=\"@{conversationModel.title}\"\n                    android:visibility='@{conversationModel.title.equals(\"\") ? View.GONE : View.VISIBLE }' />\n\n                <TextView\n                    style=\"@style/TextViewClientTitleStyle\"\n                    android:layout_below=\"@id/textView_title\"\n                    android:text=\"@{conversationModel.message}\"\n                    android:visibility='@{conversationModel.message.equals(\"\") ? View.GONE : View.VISIBLE }' />\n\n            </RelativeLayout>\n\n            <ir.vasl.chatkitlight.ui.customview.ImageViewCustom\n                android:id=\"@+id/imageView_avatar\"\n                style=\"@style/AvatarStyle\"\n                bannerImage=\"@{conversationModel.imageUrl}\"\n                android:layout_alignParentRight=\"true\"\n                app:round_image=\"true\" />\n\n        </RelativeLayout>\n\n        <LinearLayout\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_below=\"@id/linearLayout_bubble\"\n            android:layout_alignParentRight=\"true\"\n            android:layout_marginLeft=\"@dimen/avatar_circle_size_half\"\n            android:layout_marginRight=\"@dimen/avatar_circle_size_half\"\n            android:layoutDirection=\"rtl\"\n            android:gravity=\"right|center_vertical\"\n            android:orientation=\"horizontal\">\n\n            <androidx.appcompat.widget.AppCompatImageView\n                android:id=\"@+id/image\"\n                style=\"@style/TextViewSubTitleStyle\"\n                conversationStatusIcon=\"@{conversationModel.conversationStatus}\"\n                android:layout_width=\"15dp\"\n                android:layout_height=\"15dp\"\n                android:tint=\"@color/warm_grey_three\"\n                android:visibility='@{ conversationModel.conversationStatus.equals(null) ? View.GONE : View.VISIBLE  }' />\n\n            <TextView\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginRight=\"@dimen/global_margin\"\n                android:text=\"@{conversationModel.time}\"\n                android:textColor=\"@color/warm_grey_three\"\n                android:textSize=\"12sp\"\n                android:visibility='@{conversationModel.time.equals(\"\") ? View.GONE : View.VISIBLE }' />\n\n        </LinearLayout>\n\n    </RelativeLayout>\n\n</layout>\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chatkitlight/src/main/res/layouts/lawone/layout/lawone_conversation_client.xml	(revision 465eff28d3ea9c4b49a9a1186a90321f70e45200)
+++ chatkitlight/src/main/res/layouts/lawone/layout/lawone_conversation_client.xml	(date 1610537273000)
@@ -62,8 +62,10 @@
                 android:layout_alignParentRight="true"
                 app:round_image="true" />
 
-        </RelativeLayout>
+            </RelativeLayout>
 
+        </RelativeLayout>
+
         <LinearLayout
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
Index: chatkitlight/src/main/res/layouts/av/layout/layout_dialog_chat_menu.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:gravity=\"center\"\n    android:orientation=\"vertical\">\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:background=\"@drawable/shape_message_options\"\n        android:gravity=\"end|center\"\n        android:orientation=\"vertical\"\n        android:elevation=\"4dp\"\n        app:elevation=\"4dp\"\n        android:layout_marginRight=\"@dimen/global_margin\"\n        android:layout_marginLeft=\"@dimen/global_margin\"\n        android:paddingRight=\"@dimen/global_padding_extra\"\n        android:paddingLeft=\"@dimen/global_padding_extra\">\n\n        <androidx.appcompat.widget.AppCompatButton\n            android:id=\"@+id/button_copy\"\n            style=\"@style/Widget.Button\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:gravity=\"start\"\n            android:background=\"?android:attr/selectableItemBackground\"\n            android:textColor=\"@color/dark_gray\"\n            android:text=\"@string/copy_message\" />\n\n        <View\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"0.5dp\"\n            android:layout_marginStart=\"@dimen/global_margin_extra\"\n            android:layout_marginEnd=\"@dimen/global_margin_extra\"\n            android:background=\"@color/warm_grey\" />\n\n        <androidx.appcompat.widget.AppCompatButton\n            android:id=\"@+id/button_resend\"\n            style=\"@style/Widget.Button\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:gravity=\"start\"\n            android:visibility=\"gone\"\n            android:background=\"?android:attr/selectableItemBackground\"\n            android:textColor=\"@color/dark_gray\"\n            android:text=\"@string/resend_message\" />\n\n        <View\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"0.5dp\"\n            android:visibility=\"gone\"\n            android:layout_marginStart=\"@dimen/global_margin_extra\"\n            android:layout_marginEnd=\"@dimen/global_margin_extra\"\n            android:background=\"@color/warm_grey\" />\n\n        <androidx.appcompat.widget.AppCompatButton\n            android:id=\"@+id/button_delete\"\n            style=\"@style/Widget.Button\"\n            android:layout_width=\"match_parent\"\n            android:gravity=\"start\"\n            android:layout_height=\"wrap_content\"\n            android:background=\"?android:attr/selectableItemBackground\"\n            android:textColor=\"@color/dark_gray\"\n            android:text=\"@string/delete_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chatkitlight/src/main/res/layouts/av/layout/layout_dialog_chat_menu.xml	(revision 465eff28d3ea9c4b49a9a1186a90321f70e45200)
+++ chatkitlight/src/main/res/layouts/av/layout/layout_dialog_chat_menu.xml	(date 1610537273000)
@@ -25,6 +25,7 @@
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
             android:gravity="start"
+            android:visibility="gone"
             android:background="?android:attr/selectableItemBackground"
             android:textColor="@color/dark_gray"
             android:text="@string/copy_message" />
Index: chatkitlight/src/main/res/layouts/av/layout/lawone_conversation_server_audio.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\">\n\n    <data>\n\n        <import type=\"android.view.View\" />\n\n        <variable\n            name=\"conversationModel\"\n            type=\"ir.vasl.chatkitlight.model.ConversationModel\" />\n\n        <variable\n            name=\"conversationListListener\"\n            type=\"ir.vasl.chatkitlight.ui.callback.ConversationListListener\" />\n\n        <variable\n            name=\"isPlaying\"\n            type=\"boolean\" />\n    </data>\n\n    <RelativeLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layoutDirection=\"ltr\"\n        android:onClick=\"@{ () -> conversationListListener.onConversationItemClicked(conversationModel)}\"\n        android:padding=\"8dp\">\n\n        <RelativeLayout\n            android:id=\"@+id/linearLayout_bubble\"\n            android:layout_alignParentLeft=\"true\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\">\n\n            <RelativeLayout\n                style=\"@style/ChatBubbleStyle\"\n                android:layout_alignParentLeft=\"true\"\n                android:background=\"@drawable/lawone_shape_curve_server\"\n                android:padding=\"@dimen/global_padding_middle\">\n\n                <FrameLayout\n                    android:id=\"@+id/frameLayoutFile\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_toRightOf=\"@id/wave\">\n\n                    <View\n                        android:layout_width=\"@dimen/icon_circle_size\"\n                        android:layout_height=\"@dimen/icon_circle_size\"\n                        android:layout_gravity=\"right\"\n                        android:background=\"@drawable/shape_rounded_yellow\" />\n\n                    <androidx.appcompat.widget.AppCompatImageView\n                        android:id=\"@+id/imageView_play\"\n                        android:layout_width=\"@dimen/icon_circle_size\"\n                        android:layout_height=\"@dimen/icon_circle_size\"\n                        android:layout_gravity=\"right\"\n                        android:background=\"?attr/selectableItemBackground\"\n                        android:padding=\"10dp\"\n                        android:scaleType=\"centerInside\"\n                        android:src=\"@{isPlaying? @drawable/ic_pause : @drawable/ic_play}\" />\n\n                    <TextView\n                        style=\"@style/TextViewTitleStyle\"\n                        android:layout_width=\"match_parent\"\n                        android:layout_height=\"wrap_content\"\n                        android:layout_marginLeft=\"42dp\"\n                        android:text=\"@{ conversationModel.title}\"\n                        android:visibility=\"gone\" />\n\n                    <ProgressBar\n                        android:id=\"@+id/progressbar_loading\"\n                        android:layout_width=\"@dimen/icon_circle_size\"\n                        android:layout_height=\"@dimen/icon_circle_size\"\n                        android:indeterminate=\"true\"\n                        android:indeterminateTintMode=\"src_atop\"\n                        android:indeterminateTint=\"@color/warm_grey_five\"\n                        android:visibility=\"gone\" />\n\n                </FrameLayout>\n\n                <rm.com.audiowave.AudioWaveView\n                    android:id=\"@+id/wave\"\n                    android:layout_width=\"150dp\"\n                    android:layout_height=\"@dimen/icon_circle_size\"\n                    android:layout_alignParentLeft=\"true\"\n                    android:layout_marginLeft=\"@dimen/avatar_circle_size_half\"\n                    android:layout_marginRight=\"@dimen/global_margin_extra\"\n                    app:animateExpansion=\"false\"\n                    app:chunkHeight=\"28dp\"\n                    app:chunkRadius=\"1dp\"\n                    app:chunkSpacing=\"2dp\"\n                    app:chunkWidth=\"3dp\"\n                    app:minChunkHeight=\"2dp\"\n                    app:touchable=\"false\"\n                    app:waveColor=\"@color/lawone_yellow\" />\n\n            </RelativeLayout>\n\n            <ir.vasl.chatkitlight.ui.customview.ImageViewCustom\n                android:id=\"@+id/imageView_avatar\"\n                style=\"@style/AvatarStyle\"\n                bannerImage=\"@{conversationModel.imageUrl}\"\n                android:layout_alignParentLeft=\"true\"\n                app:round_image=\"true\" />\n\n            <include\n                layout=\"@layout/lawone_tilted_icon\"\n                android:visibility=\"gone\" />\n\n\n\n        </RelativeLayout>\n\n        <me.itangqi.waveloadingview.WaveLoadingView\n            android:id=\"@+id/waveView\"\n            android:layout_width=\"@dimen/download_circle_size\"\n            android:layout_height=\"@dimen/download_circle_size\"\n            android:layout_alignParentLeft=\"true\"\n            android:layout_marginLeft=\"10dp\"\n            android:layout_marginTop=\"@dimen/download_circle_size_quarter\"\n            android:visibility=\"gone\"\n            app:wlv_borderColor=\"@color/white\"\n            app:wlv_borderWidth=\"3dp\"\n            app:wlv_progressValue=\"0\"\n            app:wlv_round_rectangle=\"true\"\n            app:wlv_shapeType=\"circle\"\n            app:wlv_titleCenter=\"@string/download\"\n            app:wlv_titleCenterColor=\"@color/white\"\n            app:wlv_titleCenterSize=\"12sp\"\n            app:wlv_triangle_direction=\"north\"\n            app:wlv_waveAmplitude=\"85\"\n            app:wlv_waveColor=\"@color/red\" />\n\n        <androidx.appcompat.widget.AppCompatImageView\n            android:id=\"@+id/imageView_checkmark\"\n            android:layout_width=\"@dimen/download_circle_size\"\n            android:layout_height=\"@dimen/download_circle_size\"\n            android:layout_alignParentLeft=\"true\"\n            android:layout_marginLeft=\"10dp\"\n            android:layout_marginTop=\"@dimen/download_circle_size_quarter\"\n            android:scaleType=\"centerInside\"\n            android:visibility=\"gone\"\n            app:srcCompat=\"@drawable/checkmark_gray\" />\n\n        <LinearLayout\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_below=\"@id/linearLayout_bubble\"\n            android:layout_marginLeft=\"@dimen/avatar_circle_size_half\"\n            android:layout_marginRight=\"@dimen/avatar_circle_size_half\"\n            android:gravity=\"left|center_vertical\"\n            android:orientation=\"horizontal\">\n\n            <TextView\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"@{conversationModel.time}\"\n                android:textColor=\"@color/warm_grey_three\"\n                android:textSize=\"12sp\"\n                android:textStyle=\"bold\"\n                android:visibility='@{conversationModel.time.equals(\"\") ? View.GONE : View.VISIBLE }' />\n\n        </LinearLayout>\n\n    </RelativeLayout>\n\n</layout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chatkitlight/src/main/res/layouts/av/layout/lawone_conversation_server_audio.xml	(revision 465eff28d3ea9c4b49a9a1186a90321f70e45200)
+++ chatkitlight/src/main/res/layouts/av/layout/lawone_conversation_server_audio.xml	(date 1610537273000)
@@ -109,6 +109,20 @@
                 android:visibility="gone" />
 
 
+            </RelativeLayout>
+
+            <ir.vasl.chatkitlight.ui.customview.ImageViewCustom
+                android:id="@+id/imageView_avatar"
+                style="@style/AvatarStyle"
+                bannerImage="@{conversationModel.imageUrl}"
+                android:layout_alignParentLeft="true"
+                app:round_image="true" />
+
+            <include
+                layout="@layout/lawone_tilted_icon"
+                android:visibility="gone" />
+
+
 
         </RelativeLayout>
 
Index: chatkitlight/src/main/res/layouts/lawone/layout/lawone_conversation_server.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\">\n\n    <data>\n\n        <import type=\"android.view.View\" />\n\n        <variable\n            name=\"conversationModel\"\n            type=\"ir.vasl.chatkitlight.model.ConversationModel\" />\n\n        <variable\n            name=\"conversationListListener\"\n            type=\"ir.vasl.chatkitlight.ui.callback.ConversationListListener\" />\n    </data>\n\n    <RelativeLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layoutDirection=\"ltr\"\n        android:onClick=\"@{ () -> conversationListListener.onConversationItemClicked(conversationModel)}\"\n        android:padding=\"@dimen/global_padding\">\n\n        <RelativeLayout\n            android:id=\"@+id/linearLayout_bubble\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\">\n\n            <RelativeLayout\n                style=\"@style/ChatBubbleStyle\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_alignParentLeft=\"true\"\n                android:background=\"@drawable/lawone_shape_curve_server\">\n\n                <include\n                    layout=\"@layout/lawone_tilted_icon\"\n                    android:visibility=\"gone\" />\n\n                <TextView\n                    android:id=\"@+id/textView_title\"\n                    style=\"@style/TextViewServerTitleStyle\"\n                    android:text=\"@{ conversationModel.title}\"\n                    android:visibility='@{ conversationModel.title.equals(\"\") ? View.GONE : View.VISIBLE }' />\n\n                <TextView\n                    style=\"@style/TextViewServerTitleStyle\"\n                    android:layout_below=\"@id/textView_title\"\n                    android:text=\"@{ conversationModel.message}\"\n                    android:visibility='@{ conversationModel.message.equals(\"\") ? View.GONE : View.VISIBLE }' />\n\n            </RelativeLayout>\n\n            <ir.vasl.chatkitlight.ui.customview.ImageViewCustom\n                android:id=\"@+id/imageView_avatar\"\n                style=\"@style/AvatarStyle\"\n                bannerImage=\"@{conversationModel.imageUrl}\"\n                android:layout_alignParentLeft=\"true\"\n                app:round_image=\"true\" />\n        </RelativeLayout>\n\n        <LinearLayout\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_below=\"@+id/linearLayout_bubble\"\n            android:layout_alignParentLeft=\"true\"\n            android:layout_marginLeft=\"@dimen/avatar_circle_size_half\"\n            android:layout_marginRight=\"@dimen/avatar_circle_size_half\"\n            android:gravity=\"left|center_vertical\"\n            android:orientation=\"horizontal\">\n\n            <TextView\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"@{conversationModel.time}\"\n                android:textColor=\"@color/warm_grey_three\"\n                android:gravity=\"left\"\n                android:textSize=\"12sp\"\n                android:visibility='@{conversationModel.time.equals(\"\") ? View.GONE : View.VISIBLE }' />\n\n        </LinearLayout>\n\n    </RelativeLayout>\n\n</layout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chatkitlight/src/main/res/layouts/lawone/layout/lawone_conversation_server.xml	(revision 465eff28d3ea9c4b49a9a1186a90321f70e45200)
+++ chatkitlight/src/main/res/layouts/lawone/layout/lawone_conversation_server.xml	(date 1610537278000)
@@ -79,7 +79,7 @@
                 android:textSize="12sp"
                 android:visibility='@{conversationModel.time.equals("") ? View.GONE : View.VISIBLE }' />
 
-        </LinearLayout>
+            </RelativeLayout>
 
     </RelativeLayout>
 
Index: chatkitlight/src/main/java/ir/vasl/chatkitlight/ui/adapter/ConversationAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ir.vasl.chatkitlight.ui.adapter;\n\nimport android.content.Context;\nimport android.media.MediaPlayer;\nimport android.net.Uri;\nimport android.os.CountDownTimer;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ProgressBar;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.appcompat.widget.AppCompatImageView;\nimport androidx.databinding.DataBindingUtil;\nimport androidx.paging.PagedList;\nimport androidx.paging.PagedListAdapter;\n\nimport com.thin.downloadmanager.DownloadRequest;\nimport com.thin.downloadmanager.DownloadStatusListenerV1;\nimport com.thin.downloadmanager.ThinDownloadManager;\n\nimport ir.vasl.chatkitlight.R;\nimport ir.vasl.chatkitlight.databinding.LawoneConversationClientAudioBinding;\nimport ir.vasl.chatkitlight.databinding.LawoneConversationClientBinding;\nimport ir.vasl.chatkitlight.databinding.LawoneConversationClientFileBinding;\nimport ir.vasl.chatkitlight.databinding.LawoneConversationClientImageBinding;\nimport ir.vasl.chatkitlight.databinding.LawoneConversationServerAudioBinding;\nimport ir.vasl.chatkitlight.databinding.LawoneConversationServerBinding;\nimport ir.vasl.chatkitlight.databinding.LawoneConversationServerFileBinding;\nimport ir.vasl.chatkitlight.databinding.LawoneConversationServerImageBinding;\nimport ir.vasl.chatkitlight.databinding.LawoneConversationSystemBinding;\nimport ir.vasl.chatkitlight.databinding.ViewConversationClientAudioBinding;\nimport ir.vasl.chatkitlight.databinding.ViewConversationClientBinding;\nimport ir.vasl.chatkitlight.databinding.ViewConversationClientFileBinding;\nimport ir.vasl.chatkitlight.databinding.ViewConversationClientImageBinding;\nimport ir.vasl.chatkitlight.databinding.ViewConversationClientVideoBinding;\nimport ir.vasl.chatkitlight.databinding.ViewConversationEmptyBinding;\nimport ir.vasl.chatkitlight.databinding.ViewConversationServerAudioBinding;\nimport ir.vasl.chatkitlight.databinding.ViewConversationServerBinding;\nimport ir.vasl.chatkitlight.databinding.ViewConversationServerFileBinding;\nimport ir.vasl.chatkitlight.databinding.ViewConversationServerImageBinding;\nimport ir.vasl.chatkitlight.databinding.ViewConversationServerVideoBinding;\nimport ir.vasl.chatkitlight.databinding.ViewConversationUnsupportedBinding;\nimport ir.vasl.chatkitlight.model.ConversationModel;\nimport ir.vasl.chatkitlight.ui.base.BaseViewHolder;\nimport ir.vasl.chatkitlight.ui.callback.ConversationListListener;\nimport ir.vasl.chatkitlight.ui.dialogs.PermissionDialog;\nimport ir.vasl.chatkitlight.utils.ConversationDiffCallback;\nimport ir.vasl.chatkitlight.utils.FileHelper;\nimport ir.vasl.chatkitlight.utils.PermissionHelper;\nimport ir.vasl.chatkitlight.utils.globalEnums.ChatStyleEnum;\nimport ir.vasl.chatkitlight.utils.globalEnums.ConversationType;\nimport me.itangqi.waveloadingview.WaveLoadingView;\nimport rm.com.audiowave.AudioWaveView;\n\n@SuppressWarnings(\"rawtypes\")\npublic class ConversationAdapter extends PagedListAdapter<ConversationModel, BaseViewHolder> implements ConversationListListener {\n\n    private ConversationListListener conversationListListener;\n    private ChatStyleEnum chatStyleEnum;\n    private Context context; // for permission, storage management and intent initialization\n    private ThinDownloadManager downloadManager; // one dl mgr for the whole list\n    static MediaPlayer mp; //Media Player to play voices and audios\n\n    public ConversationAdapter(ConversationListListener conversationListListener, ChatStyleEnum chatStyleEnum) {\n        super(new ConversationDiffCallback());\n        this.setHasStableIds(true);\n        this.chatStyleEnum = chatStyleEnum;\n        this.conversationListListener = conversationListListener;\n        this.downloadManager = new ThinDownloadManager();\n    }\n\n    @NonNull\n    @Override\n    public BaseViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        context = parent.getContext();\n        LayoutInflater inflater = LayoutInflater.from(parent.getContext());\n        switch (chatStyleEnum) {\n            case DEFAULT:\n            case ARMAN_VARZESH:\n                return AvViewHolderCreator(parent, inflater, viewType);\n            case LAWONE:\n                return LawoneViewHolderCreator(parent, inflater, viewType);\n        }\n        return null; //chatStyle is non-defined? impossible\n    }\n\n    @Override\n    public long getItemId(int position) { //todo -> must be unique\n        return position;\n    }\n\n    @Override\n    public void onBindViewHolder(@NonNull BaseViewHolder holder, int position) {\n        if (getCurrentList() == null || getCurrentList().snapshot().size() == 0 || getItem(position) == null)\n            return;\n\n        switch (chatStyleEnum) {\n            case DEFAULT:\n            case ARMAN_VARZESH:\n                AvBinder(holder, position);\n                break;\n            case LAWONE:\n                LawoneBinder(holder, position);\n                break;\n        }\n    }\n\n    private void LawoneBinder(BaseViewHolder holder, int position) {\n        if (holder.getItemViewType() >= 10000) {\n            switch (ConversationType.get(holder.getItemViewType() - 10000)) {\n                case CLIENT: {\n                    ConversationModel model = getItem(position);\n                    holder.onBind(position);\n                    ((ConversationViewHolder) holder).lawoneClientAudioBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).lawoneClientAudioBinding.setConversationListListener(this);\n                    break;\n                }\n\n                case SERVER: {\n                    ConversationModel model = getItem(position);\n                    holder.onBind(position);\n                    ((ConversationViewHolder) holder).lawoneServerAudioBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).lawoneServerAudioBinding.setConversationListListener(this);\n                    break;\n                }\n                case EMPTY:\n                    ((ConversationViewHolder) holder).emptyBinding.setConversationListListener(this);\n                    break;\n\n                case SYSTEM:\n                    ConversationModel model = getItem(position);\n                    ((ConversationViewHolder) holder).lawoneConversationSystemBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).lawoneConversationSystemBinding.setConversationListListener(this);\n                    break;\n\n                case UNDEFINE:\n                default:\n                    ((ConversationViewHolder) holder).unsupportedBinding.setConversationListListener(this);\n                    break;\n            }\n        } else if (holder.getItemViewType() >= 1000) {\n            switch (ConversationType.get(holder.getItemViewType() - 1000)) {\n                case CLIENT: {\n                    ConversationModel model = getItem(position);\n                    holder.onBind(position);\n                    ((ConversationViewHolder) holder).lawoneClientImageBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).lawoneClientImageBinding.setConversationListListener(this);\n                    ((ConversationViewHolder) holder).lawoneClientImageBinding.imageViewImage.setImageUrlCurve(getItem(position).getFileAddress(), 12);\n                    break;\n                }\n                case SERVER: {\n                    ConversationModel model = getItem(position);\n                    ((ConversationViewHolder) holder).lawoneServerImageBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).lawoneServerImageBinding.setConversationListListener(this);\n                    ((ConversationViewHolder) holder).lawoneServerImageBinding.imageViewImage.setImageUrlCurve(getItem(position).getFileAddress(), 12);\n                    break;\n                }\n                case EMPTY:\n                    ((ConversationViewHolder) holder).emptyBinding.setConversationListListener(this);\n                    break;\n\n                case SYSTEM:\n                    ConversationModel model = getItem(position);\n                    ((ConversationViewHolder) holder).lawoneConversationSystemBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).lawoneConversationSystemBinding.setConversationListListener(this);\n                    break;\n\n                case UNDEFINE:\n                default:\n                    ((ConversationViewHolder) holder).unsupportedBinding.setConversationListListener(this);\n                    break;\n            }\n        } else if (holder.getItemViewType() >= 100) {\n            switch (ConversationType.get(holder.getItemViewType() - 100)) {\n                case CLIENT: {\n                    ConversationModel model = getItem(position);\n                    holder.onBind(position);\n                    ((ConversationViewHolder) holder).clientVideoBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).clientVideoBinding.setConversationListListener(this);\n                    ((ConversationViewHolder) holder).clientVideoBinding.imageViewImage.setImageUrlCurve(getItem(position).getFileAddress(), 12);\n                    break;\n                }\n                case SERVER: {\n                    ConversationModel model = getItem(position);\n                    ((ConversationViewHolder) holder).serverVideoBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).serverVideoBinding.setConversationListListener(this);\n                    ((ConversationViewHolder) holder).serverVideoBinding.imageViewImage.setImageUrlCurve(getItem(position).getFileAddress(), 12);\n\n                    break;\n                }\n                case SYSTEM:\n                    ConversationModel model = getItem(position);\n                    ((ConversationViewHolder) holder).lawoneConversationSystemBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).lawoneConversationSystemBinding.setConversationListListener(this);\n                    break;\n                case EMPTY:\n                    ((ConversationViewHolder) holder).emptyBinding.setConversationListListener(this);\n                    break;\n                case UNDEFINE:\n                default:\n                    ((ConversationViewHolder) holder).unsupportedBinding.setConversationListListener(this);\n                    break;\n            }\n        } else if (holder.getItemViewType() >= 10) {\n            switch (ConversationType.get(holder.getItemViewType() - 10)) {\n                case CLIENT: {\n                    ConversationModel model = getItem(position);\n                    holder.onBind(position);\n                    ((ConversationViewHolder) holder).lawoneClientFileBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).lawoneClientFileBinding.setConversationListListener(this);\n                    break;\n                }\n                case SERVER: {\n                    ConversationModel model = getItem(position);\n                    ((ConversationViewHolder) holder).lawoneServerFileBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).lawoneServerFileBinding.setConversationListListener(this);\n                    break;\n                }\n                case SYSTEM:\n                    ConversationModel model = getItem(position);\n                    ((ConversationViewHolder) holder).lawoneConversationSystemBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).lawoneConversationSystemBinding.setConversationListListener(this);\n                    break;\n                case EMPTY:\n                    ((ConversationViewHolder) holder).emptyBinding.setConversationListListener(this);\n                    break;\n                case UNDEFINE:\n                default:\n                    ((ConversationViewHolder) holder).unsupportedBinding.setConversationListListener(this);\n                    break;\n            }\n        } else {\n            switch (ConversationType.get(holder.getItemViewType())) {\n                case CLIENT: {\n                    ConversationModel model = getItem(position);\n                    holder.onBind(position);\n                    ((ConversationViewHolder) holder).lawoneClientTextBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).lawoneClientTextBinding.setConversationListListener(this);\n                    break;\n                }\n                case SERVER: {\n                    ConversationModel model = getItem(position);\n                    ((ConversationViewHolder) holder).lawoneServerTextBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).lawoneServerTextBinding.setConversationListListener(this);\n                    break;\n                }\n                case EMPTY:\n                    ((ConversationViewHolder) holder).emptyBinding.setConversationListListener(this);\n                    break;\n                case SYSTEM:\n                    ConversationModel model = getItem(position);\n                    ((ConversationViewHolder) holder).lawoneConversationSystemBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).lawoneConversationSystemBinding.setConversationListListener(this);\n                    break;\n                case UNDEFINE:\n                default:\n                    ((ConversationViewHolder) holder).unsupportedBinding.setConversationListListener(this);\n                    break;\n            }\n        }\n    }\n\n    private void AvBinder(BaseViewHolder holder, int position) {\n        if (holder.getItemViewType() >= 10000) {\n            switch (ConversationType.get(holder.getItemViewType() - 10000)) {\n                case CLIENT: {\n                    ConversationModel model = getItem(position);\n                    holder.onBind(position);\n                    ((ConversationViewHolder) holder).clientAudioBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).clientAudioBinding.setConversationListListener(this);\n                    break;\n                }\n                case SERVER: {\n                    ConversationModel model = getItem(position);\n                    ((ConversationViewHolder) holder).serverAudioBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).serverAudioBinding.setConversationListListener(this);\n                    break;\n                }\n                case EMPTY:\n                    ((ConversationViewHolder) holder).emptyBinding.setConversationListListener(this);\n                    break;\n                case UNDEFINE:\n                default:\n                    ((ConversationViewHolder) holder).unsupportedBinding.setConversationListListener(this);\n                    break;\n            }\n        } else if (holder.getItemViewType() >= 1000) {\n            switch (ConversationType.get(holder.getItemViewType() - 1000)) {\n                case CLIENT: {\n                    ConversationModel model = getItem(position);\n                    holder.onBind(position);\n                    ((ConversationViewHolder) holder).clientImageBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).clientImageBinding.setConversationListListener(this);\n                    ((ConversationViewHolder) holder).clientImageBinding.imageViewImage.setImageUrlCurve(getItem(position).getFileAddress(), 12);\n                    break;\n                }\n                case SERVER: {\n                    ConversationModel model = getItem(position);\n                    ((ConversationViewHolder) holder).serverImageBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).serverImageBinding.setConversationListListener(this);\n                    ((ConversationViewHolder) holder).serverImageBinding.imageViewImage.setImageUrlCurve(getItem(position).getFileAddress(), 12);\n\n                    break;\n                }\n\n                case EMPTY:\n                    ((ConversationViewHolder) holder).emptyBinding.setConversationListListener(this);\n                    break;\n\n                case UNDEFINE:\n                default:\n                    ((ConversationViewHolder) holder).unsupportedBinding.setConversationListListener(this);\n                    break;\n            }\n        } else if (holder.getItemViewType() >= 100) {\n            switch (ConversationType.get(holder.getItemViewType() - 100)) {\n                case CLIENT: {\n                    ConversationModel model = getItem(position);\n                    holder.onBind(position);\n                    ((ConversationViewHolder) holder).clientVideoBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).clientVideoBinding.setConversationListListener(this);\n                    ((ConversationViewHolder) holder).clientVideoBinding.imageViewImage.setImageUrlCurve(getItem(position).getFileAddress(), 12);\n\n                    break;\n                }\n\n                case SERVER: {\n                    ConversationModel model = getItem(position);\n                    ((ConversationViewHolder) holder).serverVideoBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).serverVideoBinding.setConversationListListener(this);\n                    ((ConversationViewHolder) holder).serverVideoBinding.imageViewImage.setImageUrlCurve(getItem(position).getFileAddress(), 12);\n\n                    break;\n                }\n\n                case EMPTY:\n                    ((ConversationViewHolder) holder).emptyBinding.setConversationListListener(this);\n                    break;\n\n                case UNDEFINE:\n                default:\n                    ((ConversationViewHolder) holder).unsupportedBinding.setConversationListListener(this);\n                    break;\n            }\n        } else if (holder.getItemViewType() >= 10) {\n            switch (ConversationType.get(holder.getItemViewType() - 10)) {\n                case CLIENT: {\n                    ConversationModel model = getItem(position);\n                    holder.onBind(position);\n                    ((ConversationViewHolder) holder).clientFileBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).clientFileBinding.setConversationListListener(this);\n                    break;\n                }\n\n                case SERVER: {\n                    ConversationModel model = getItem(position);\n                    ((ConversationViewHolder) holder).serverFileBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).serverFileBinding.setConversationListListener(this);\n                    break;\n                }\n\n                case EMPTY:\n                    ((ConversationViewHolder) holder).emptyBinding.setConversationListListener(this);\n                    break;\n\n                case UNDEFINE:\n                default:\n                    ((ConversationViewHolder) holder).unsupportedBinding.setConversationListListener(this);\n                    break;\n            }\n        } else {\n            switch (ConversationType.get(holder.getItemViewType())) {\n                case CLIENT: {\n                    ConversationModel model = getItem(position);\n                    holder.onBind(position);\n                    ((ConversationViewHolder) holder).clientTextBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).clientTextBinding.setConversationListListener(this);\n                    break;\n                }\n\n                case SERVER: {\n                    ConversationModel model = getItem(position);\n                    ((ConversationViewHolder) holder).serverTextBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).serverTextBinding.setConversationListListener(this);\n                    break;\n                }\n\n                case EMPTY:\n                    ((ConversationViewHolder) holder).emptyBinding.setConversationListListener(this);\n                    break;\n\n                case UNDEFINE:\n                default:\n                    ((ConversationViewHolder) holder).unsupportedBinding.setConversationListListener(this);\n                    break;\n            }\n        }\n    }\n\n    @Override\n    public void submitList(@Nullable PagedList<ConversationModel> pagedList) {\n        super.submitList(pagedList);\n    }\n\n    @Override\n    public int getItemViewType(int position) {\n\n        if (getCurrentList() == null)\n            return ConversationType.EMPTY.getValue();\n\n        if (getCurrentList().snapshot().size() == 0)\n            return ConversationType.EMPTY.getValue();\n\n        if (getItem(position) == null)\n            return ConversationType.EMPTY.getValue();\n\n        ConversationModel model = getItem(position);\n\n        if (model == null || getItemCount() == 0)\n            return ConversationType.EMPTY.getValue();\n\n        if (getItem(position).getFileType() != null) {\n            switch (getItem(position).getFileType()) {\n                case NONE:\n                    return model.getConversationType().getValue();\n                case DOCUMENT:\n                case VIDEO:\n                case IMAGE:\n                case AUDIO:\n                    return model.getConversationType().getValue() + model.getFileType().getValue();\n            }\n        }\n        return model.getConversationType().getValue();\n    }\n\n    @Override\n    public int getItemCount() {\n\n        if (getCurrentList() == null || getCurrentList().snapshot().size() == 0)\n            return 1;\n\n        return getCurrentList().snapshot().size();\n    }\n\n    @Override\n    public void onConversationItemClicked(Object object) {\n        if (conversationListListener != null)\n            conversationListListener.onConversationItemClicked(object);\n    }\n\n    private BaseViewHolder LawoneViewHolderCreator(ViewGroup parent, LayoutInflater inflater, int viewType) {\n        if (viewType >= 10000) {\n            switch (ConversationType.get(viewType - 10000)) {\n                case CLIENT:\n                    LawoneConversationClientAudioBinding clientBinding = DataBindingUtil.inflate(inflater, R.layout.lawone_conversation_client_audio, parent, false);\n                    return new ConversationViewHolder(clientBinding);\n\n                case SERVER:\n                    LawoneConversationServerAudioBinding serverBinding = DataBindingUtil.inflate(inflater, R.layout.lawone_conversation_server_audio, parent, false);\n                    return new ConversationViewHolder(serverBinding);\n\n                case EMPTY:\n                    ViewConversationEmptyBinding emptyBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_empty, parent, false);\n                    return new ConversationViewHolder(emptyBinding);\n                case SYSTEM:\n                    LawoneConversationSystemBinding lawoneConversationSystemBinding = DataBindingUtil.inflate(inflater, R.layout.lawone_conversation_system, parent, false);\n                    return new ConversationViewHolder(lawoneConversationSystemBinding);\n                default:\n                    ViewConversationUnsupportedBinding unsupportedBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_unsupported, parent, false);\n                    return new ConversationViewHolder(unsupportedBinding);\n            }\n        } else if (viewType >= 1000) {\n            switch (ConversationType.get(viewType - 1000)) {\n                case CLIENT:\n                    LawoneConversationClientImageBinding clientBinding = DataBindingUtil.inflate(inflater, R.layout.lawone_conversation_client_image, parent, false);\n                    return new ConversationViewHolder(clientBinding);\n\n                case SERVER:\n                    LawoneConversationServerImageBinding serverBinding = DataBindingUtil.inflate(inflater, R.layout.lawone_conversation_server_image, parent, false);\n                    return new ConversationViewHolder(serverBinding);\n\n                case EMPTY:\n                    ViewConversationEmptyBinding emptyBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_empty, parent, false);\n                    return new ConversationViewHolder(emptyBinding);\n\n                case SYSTEM:\n                    LawoneConversationSystemBinding lawoneConversationSystemBinding = DataBindingUtil.inflate(inflater, R.layout.lawone_conversation_system, parent, false);\n                    return new ConversationViewHolder(lawoneConversationSystemBinding);\n\n                default:\n                    ViewConversationUnsupportedBinding unsupportedBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_unsupported, parent, false);\n                    return new ConversationViewHolder(unsupportedBinding);\n            }\n        } else if (viewType >= 100) {\n            switch (ConversationType.get(viewType - 100)) {\n                case CLIENT:\n                    ViewConversationClientVideoBinding clientBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_client_video, parent, false);\n                    return new ConversationViewHolder(clientBinding);\n\n                case SERVER:\n                    ViewConversationServerVideoBinding serverBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_server_video, parent, false);\n                    return new ConversationViewHolder(serverBinding);\n\n                case EMPTY:\n                    ViewConversationEmptyBinding emptyBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_empty, parent, false);\n                    return new ConversationViewHolder(emptyBinding);\n\n                case SYSTEM:\n                    LawoneConversationSystemBinding lawoneConversationSystemBinding = DataBindingUtil.inflate(inflater, R.layout.lawone_conversation_system, parent, false);\n                    return new ConversationViewHolder(lawoneConversationSystemBinding);\n\n                default:\n                    ViewConversationUnsupportedBinding unsupportedBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_unsupported, parent, false);\n                    return new ConversationViewHolder(unsupportedBinding);\n            }\n        } else if (viewType >= 10) {\n            switch (ConversationType.get(viewType - 10)) {\n                case CLIENT:\n                    LawoneConversationClientFileBinding clientBinding = DataBindingUtil.inflate(inflater, R.layout.lawone_conversation_client_file, parent, false);\n                    return new ConversationViewHolder(clientBinding);\n\n                case SERVER:\n                    LawoneConversationServerFileBinding serverBinding = DataBindingUtil.inflate(inflater, R.layout.lawone_conversation_server_file, parent, false);\n                    return new ConversationViewHolder(serverBinding);\n\n                case EMPTY:\n                    ViewConversationEmptyBinding emptyBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_empty, parent, false);\n                    return new ConversationViewHolder(emptyBinding);\n\n                case SYSTEM:\n                    LawoneConversationSystemBinding lawoneConversationSystemBinding = DataBindingUtil.inflate(inflater, R.layout.lawone_conversation_system, parent, false);\n                    return new ConversationViewHolder(lawoneConversationSystemBinding);\n\n                default:\n                    ViewConversationUnsupportedBinding unsupportedBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_unsupported, parent, false);\n                    return new ConversationViewHolder(unsupportedBinding);\n            }\n        } else {\n            switch (ConversationType.get(viewType)) {\n                case CLIENT:\n                    LawoneConversationClientBinding clientBinding = DataBindingUtil.inflate(inflater, R.layout.lawone_conversation_client, parent, false);\n                    return new ConversationViewHolder(clientBinding);\n\n                case SERVER:\n                    LawoneConversationServerBinding serverBinding = DataBindingUtil.inflate(inflater, R.layout.lawone_conversation_server, parent, false);\n                    return new ConversationViewHolder(serverBinding);\n\n                case EMPTY:\n                    ViewConversationEmptyBinding emptyBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_empty, parent, false);\n                    return new ConversationViewHolder(emptyBinding);\n\n                case SYSTEM:\n                    LawoneConversationSystemBinding lawoneConversationSystemBinding = DataBindingUtil.inflate(inflater, R.layout.lawone_conversation_system, parent, false);\n                    return new ConversationViewHolder(lawoneConversationSystemBinding);\n\n                default:\n                    ViewConversationUnsupportedBinding unsupportedBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_unsupported, parent, false);\n                    return new ConversationViewHolder(unsupportedBinding);\n            }\n        }\n    }\n\n    private BaseViewHolder AvViewHolderCreator(ViewGroup parent, LayoutInflater inflater, int viewType) {\n        if (viewType >= 10000) {\n            switch (ConversationType.get(viewType - 10000)) {\n                case CLIENT:\n                    ViewConversationClientAudioBinding clientBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_client_audio, parent, false);\n                    return new ConversationViewHolder(clientBinding);\n\n                case SERVER:\n                    ViewConversationServerAudioBinding serverBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_server_audio, parent, false);\n                    return new ConversationViewHolder(serverBinding);\n\n                case EMPTY:\n                    ViewConversationEmptyBinding emptyBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_empty, parent, false);\n                    return new ConversationViewHolder(emptyBinding);\n\n                default:\n                    ViewConversationUnsupportedBinding unsupportedBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_unsupported, parent, false);\n                    return new ConversationViewHolder(unsupportedBinding);\n            }\n        } else if (viewType >= 1000) {\n            switch (ConversationType.get(viewType - 1000)) {\n                case CLIENT:\n                    ViewConversationClientImageBinding clientBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_client_image, parent, false);\n                    return new ConversationViewHolder(clientBinding);\n\n                case SERVER:\n                    ViewConversationServerImageBinding serverBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_server_image, parent, false);\n                    return new ConversationViewHolder(serverBinding);\n\n                case EMPTY:\n                    ViewConversationEmptyBinding emptyBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_empty, parent, false);\n                    return new ConversationViewHolder(emptyBinding);\n\n                default:\n                    ViewConversationUnsupportedBinding unsupportedBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_unsupported, parent, false);\n                    return new ConversationViewHolder(unsupportedBinding);\n            }\n        } else if (viewType >= 100) {\n            switch (ConversationType.get(viewType - 100)) {\n                case CLIENT:\n                    ViewConversationClientVideoBinding clientBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_client_video, parent, false);\n                    return new ConversationViewHolder(clientBinding);\n\n                case SERVER:\n                    ViewConversationServerVideoBinding serverBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_server_video, parent, false);\n                    return new ConversationViewHolder(serverBinding);\n\n                case EMPTY:\n                    ViewConversationEmptyBinding emptyBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_empty, parent, false);\n                    return new ConversationViewHolder(emptyBinding);\n\n                default:\n                    ViewConversationUnsupportedBinding unsupportedBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_unsupported, parent, false);\n                    return new ConversationViewHolder(unsupportedBinding);\n            }\n        } else if (viewType >= 10) {\n            switch (ConversationType.get(viewType - 10)) {\n                case CLIENT:\n                    ViewConversationClientFileBinding clientBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_client_file, parent, false);\n                    return new ConversationViewHolder(clientBinding);\n\n                case SERVER:\n                    ViewConversationServerFileBinding serverBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_server_file, parent, false);\n                    return new ConversationViewHolder(serverBinding);\n\n                case EMPTY:\n                    ViewConversationEmptyBinding emptyBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_empty, parent, false);\n                    return new ConversationViewHolder(emptyBinding);\n\n                default:\n                    ViewConversationUnsupportedBinding unsupportedBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_unsupported, parent, false);\n                    return new ConversationViewHolder(unsupportedBinding);\n            }\n        } else {\n            switch (ConversationType.get(viewType)) {\n                case CLIENT:\n                    ViewConversationClientBinding clientBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_client, parent, false);\n                    return new ConversationViewHolder(clientBinding);\n\n                case SERVER:\n                    ViewConversationServerBinding serverBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_server, parent, false);\n                    return new ConversationViewHolder(serverBinding);\n\n                case EMPTY:\n                    ViewConversationEmptyBinding emptyBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_empty, parent, false);\n                    return new ConversationViewHolder(emptyBinding);\n\n                default:\n                    ViewConversationUnsupportedBinding unsupportedBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_unsupported, parent, false);\n                    return new ConversationViewHolder(unsupportedBinding);\n            }\n        }\n    }\n\n    private class ConversationViewHolder extends BaseViewHolder {\n        DownloadRequest downloadRequest = null; //download request for different file types\n\n        //DEFAULT - AV\n        private ViewConversationClientBinding clientTextBinding;\n        private ViewConversationClientImageBinding clientImageBinding;\n        private ViewConversationClientVideoBinding clientVideoBinding;\n        private ViewConversationClientAudioBinding clientAudioBinding;\n        private ViewConversationClientFileBinding clientFileBinding;\n\n        private ViewConversationServerBinding serverTextBinding;\n        private ViewConversationServerImageBinding serverImageBinding;\n        private ViewConversationServerVideoBinding serverVideoBinding;\n        private ViewConversationServerAudioBinding serverAudioBinding;\n        private ViewConversationServerFileBinding serverFileBinding;\n\n        private ViewConversationEmptyBinding emptyBinding;\n        private ViewConversationUnsupportedBinding unsupportedBinding;\n\n        //LAWONE\n        private LawoneConversationClientBinding lawoneClientTextBinding;\n        private LawoneConversationClientImageBinding lawoneClientImageBinding;\n        private LawoneConversationClientFileBinding lawoneClientFileBinding;\n        private LawoneConversationClientAudioBinding lawoneClientAudioBinding;\n\n        private LawoneConversationServerBinding lawoneServerTextBinding;\n        private LawoneConversationServerImageBinding lawoneServerImageBinding;\n        private LawoneConversationServerFileBinding lawoneServerFileBinding;\n        private LawoneConversationServerAudioBinding lawoneServerAudioBinding;\n\n        //SYSTEM\n        // private SystemConversationBinding systemConversationBinding;\n        private LawoneConversationSystemBinding lawoneConversationSystemBinding;\n\n        @Override\n        public void onBind(int position) {\n            super.onBind(position);\n            if (getItem(position) == null)\n                return;\n            if (lawoneClientFileBinding != null) { //client file\n                if (FileHelper.checkFileExistence(context, getItem(position).getTitle())) {\n//                    lawoneClientFileBinding.imageViewCheckmark.setVisibility(View.VISIBLE);\n                    downloadProgressDone(lawoneClientFileBinding.waveView);\n                }\n            }\n            if (lawoneServerFileBinding != null) { //server file\n                if (FileHelper.checkFileExistence(context, getItem(position).getTitle())) {\n//                    lawoneServerFileBinding.imageViewCheckmark.setVisibility(View.VISIBLE);\n                    downloadProgressDone(lawoneServerFileBinding.waveView);\n                }\n            }\n            if (lawoneClientAudioBinding != null) { //client audio\n                if (FileHelper.checkFileExistence(context, getItem(position).getTitle())) {\n//                    lawoneClientAudioBinding.imageViewCheckmark.setVisibility(View.VISIBLE);\n                    downloadProgressDone(lawoneClientAudioBinding.waveView);\n                    lawoneClientAudioBinding.wave.setRawData(FileHelper.getFileBytes(context, getItem(getBindingAdapterPosition()).getTitle()));\n                }\n            }\n            if (lawoneServerAudioBinding != null) { //server audio\n                if (FileHelper.checkFileExistence(context, getItem(position).getTitle())) {\n//                    lawoneServerAudioBinding.imageViewCheckmark.setVisibility(View.VISIBLE);\n                    downloadProgressDone(lawoneServerAudioBinding.waveView);\n                    lawoneServerAudioBinding.wave.setRawData(FileHelper.getFileBytes(context, getItem(getBindingAdapterPosition()).getTitle()));\n                }\n            }\n            if (clientAudioBinding != null) { //client audio\n                if (FileHelper.checkFileExistence(context, getItem(position).getTitle())) {\n//                    clientAudioBinding.imageViewCheckmark.setVisibility(View.VISIBLE);\n                    downloadProgressDone(clientAudioBinding.waveView);\n                    clientAudioBinding.wave.setRawData(FileHelper.getFileBytes(context, getItem(getBindingAdapterPosition()).getTitle()));\n                }\n            }\n            if (serverAudioBinding != null) { //server audio\n                if (FileHelper.checkFileExistence(context, getItem(position).getTitle())) {\n//                    serverAudioBinding.imageViewCheckmark.setVisibility(View.VISIBLE);\n                    downloadProgressDone(serverAudioBinding.waveView);\n                    serverAudioBinding.wave.setRawData(FileHelper.getFileBytes(context, getItem(getBindingAdapterPosition()).getTitle()));\n                }\n            }\n        }\n\n        //HELPER FUNCTIONS\n        private DownloadStatusListenerV1 downloadListenerCreator(AppCompatImageView imageViewCheckmark, ProgressBar loadingProgress, AudioWaveView wave) {\n            return new DownloadStatusListenerV1() {\n                @Override\n                public void onDownloadComplete(DownloadRequest downloadRequest) {\n//                    imageViewCheckmark.setVisibility(View.VISIBLE);\n//                    waveView.setWaveColor(context.getResources().getColor(R.color.green));\n                    if (loadingProgress != null)\n                        loadingProgress.setVisibility(View.GONE);\n                    if (wave != null) {\n                        wave.setRawData(FileHelper.getFileBytes(context, getItem(getBindingAdapterPosition()).getTitle()));\n                        wave.performClick();\n                    }\n                }\n\n                @Override\n                public void onDownloadFailed(DownloadRequest downloadRequest, int errorCode, String errorMessage) {\n                    if (loadingProgress != null)\n                        loadingProgress.setVisibility(View.GONE);\n//                    waveView.setCenterTitle(context.getString(R.string.download));\n                }\n\n                @Override\n                public void onProgress(DownloadRequest downloadRequest, long totalBytes, long downloadedBytes, int progress) {\n//                    waveView.setCenterTitle(\"\");\n//                    waveView.setProgressValue(progress);\n//                    waveView.startAnimation();\n                    if (loadingProgress != null)\n                        loadingProgress.setVisibility(View.VISIBLE);\n                }\n            };\n        }\n\n        private void downloadProgressDone(WaveLoadingView waveView) {\n            waveView.setCenterTitle(\"\");\n            waveView.setProgressValue(100);\n            waveView.setWaveColor(context.getResources().getColor(R.color.green));\n        }\n\n        private CountDownTimer getAudioSeeker(AudioWaveView wave) {\n            return new CountDownTimer(1000, 10) {\n                @Override\n                public void onTick(long millisUntilFinished) {\n                    if (mp != null && wave != null)\n                        try {\n                            wave.setProgress(((int) ((((float) mp.getCurrentPosition()) / ((float) mp.getDuration())) * 100)));\n                        } catch (Exception e) {\n                            e.printStackTrace();\n                        }\n                }\n\n                @Override\n                public void onFinish() {\n                    try {\n                        if (mp.isPlaying())\n                            this.start();\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                }\n            };\n        }\n\n        // DEFAULT - AV CONSTRUCTORS\n        public ConversationViewHolder(ViewConversationClientBinding clientTextBinding) {\n            super(clientTextBinding.getRoot());\n            this.clientTextBinding = clientTextBinding;\n        }\n\n        public ConversationViewHolder(ViewConversationServerBinding serverTextBinding) {\n            super(serverTextBinding.getRoot());\n            this.serverTextBinding = serverTextBinding;\n        }\n\n        public ConversationViewHolder(ViewConversationEmptyBinding emptyBinding) {\n            super(emptyBinding.getRoot());\n            this.emptyBinding = emptyBinding;\n        }\n\n        public ConversationViewHolder(ViewConversationUnsupportedBinding unsupportedBinding) {\n            super(unsupportedBinding.getRoot());\n            this.unsupportedBinding = unsupportedBinding;\n        }\n\n        public ConversationViewHolder(ViewConversationClientImageBinding clientImageBinding) {\n            super(clientImageBinding.getRoot());\n            this.clientImageBinding = clientImageBinding;\n            this.clientImageBinding.imageViewImage.setOnClickListener(v -> {\n                if (getBindingAdapterPosition() == -1 || getItem(getBindingAdapterPosition()) == null)\n                    return;\n                FileHelper.openFile(context, getItem(getBindingAdapterPosition()).getFileAddress(), getItem(getBindingAdapterPosition()).getTitle());\n            });\n        }\n\n        public ConversationViewHolder(ViewConversationClientVideoBinding clientVideoBinding) {\n            super(clientVideoBinding.getRoot());\n            this.clientVideoBinding = clientVideoBinding;\n            this.clientVideoBinding.imageViewImage.setOnClickListener(v -> {\n                if (getBindingAdapterPosition() == -1 || getItem(getBindingAdapterPosition()) == null)\n                    return;\n                FileHelper.openFile(context, getItem(getBindingAdapterPosition()).getFileAddress(), getItem(getBindingAdapterPosition()).getTitle());\n            });\n        }\n\n        public ConversationViewHolder(ViewConversationClientAudioBinding clientAudioBinding) {\n            super(clientAudioBinding.getRoot());\n            this.clientAudioBinding = clientAudioBinding;\n            this.clientAudioBinding.setIsPlaying(false);\n            this.clientAudioBinding.frameLayoutFile.setOnClickListener(v -> {\n                if (getBindingAdapterPosition() == -1 || getItem(getBindingAdapterPosition()) == null)\n                    return;\n                if (!PermissionHelper.checkStoragePermission(context)) {\n                    new PermissionDialog(context, () -> conversationListListener.requestStoragePermission()).show();\n                    return;\n                }\n                if (FileHelper.checkFileExistence(context, getItem(getBindingAdapterPosition()).getTitle())) {\n                    if (this.clientAudioBinding.getIsPlaying()) {\n                        mp.pause();\n                        this.clientAudioBinding.setIsPlaying(false);\n                        return;\n                    }\n                    mp = new MediaPlayer();\n                    try {\n                        mp.setDataSource(getItem(getBindingAdapterPosition()).getFileAddress());\n                        mp.prepareAsync();\n                        mp.setOnPreparedListener(mp -> {\n                            mp.start();\n                            getAudioSeeker(this.clientAudioBinding.wave).start();\n                            this.clientAudioBinding.setIsPlaying(true);\n                        });\n                        mp.setOnCompletionListener(mp -> this.clientAudioBinding.setIsPlaying(false));\n                        mp.setOnErrorListener((mp, what, extra) -> {\n                            this.clientAudioBinding.setIsPlaying(false);\n                            return false;\n                        });\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                } else {\n                    downloadRequest = FileHelper.downloadFile(context, getItem(getBindingAdapterPosition()).getFileAddress(),\n                            getItem(getBindingAdapterPosition()).getTitle(),\n                            downloadListenerCreator(clientAudioBinding.imageViewCheckmark, null, clientAudioBinding.wave));\n                    if (downloadRequest != null)\n                        downloadManager.add(downloadRequest);\n                }\n            });\n        }\n\n        public ConversationViewHolder(ViewConversationClientFileBinding clientFileBinding) {\n            super(clientFileBinding.getRoot());\n            this.clientFileBinding = clientFileBinding;\n            this.clientFileBinding.frameLayoutFile.setOnClickListener(v -> {\n                if (getBindingAdapterPosition() == -1 || getItem(getBindingAdapterPosition()) == null)\n                    return;\n                FileHelper.openFile(context, getItem(getBindingAdapterPosition()).getFileAddress(), getItem(getBindingAdapterPosition()).getTitle());\n            });\n        }\n\n        public ConversationViewHolder(ViewConversationServerImageBinding serverImageBinding) {\n            super(serverImageBinding.getRoot());\n            this.serverImageBinding = serverImageBinding;\n            this.serverImageBinding.imageViewImage.setOnClickListener(v -> {\n                if (getBindingAdapterPosition() == -1 || getItem(getBindingAdapterPosition()) == null)\n                    return;\n                FileHelper.openFile(context, getItem(getBindingAdapterPosition()).getFileAddress(), getItem(getBindingAdapterPosition()).getTitle());\n            });\n        }\n\n        public ConversationViewHolder(ViewConversationServerVideoBinding serverVideoBinding) {\n            super(serverVideoBinding.getRoot());\n            this.serverVideoBinding = serverVideoBinding;\n            this.serverVideoBinding.imageViewImage.setOnClickListener(v -> {\n                if (getBindingAdapterPosition() == -1 || getItem(getBindingAdapterPosition()) == null)\n                    return;\n                FileHelper.openFile(context, getItem(getBindingAdapterPosition()).getFileAddress(), getItem(getBindingAdapterPosition()).getTitle());\n            });\n        }\n\n        public ConversationViewHolder(ViewConversationServerAudioBinding serverAudioBinding) {\n            super(serverAudioBinding.getRoot());\n            this.serverAudioBinding = serverAudioBinding;\n            this.serverAudioBinding.setIsPlaying(false);\n            this.serverAudioBinding.frameLayoutFile.setOnClickListener(v -> {\n                if (getBindingAdapterPosition() == -1 || getItem(getBindingAdapterPosition()) == null)\n                    return;\n                if (!PermissionHelper.checkStoragePermission(context)) {\n                    new PermissionDialog(context, () -> conversationListListener.requestStoragePermission()).show();\n                    return;\n                }\n                if (FileHelper.checkFileExistence(context, getItem(getBindingAdapterPosition()).getTitle())) {\n                    if (this.serverAudioBinding.getIsPlaying()) {\n                        mp.pause();\n                        this.serverAudioBinding.setIsPlaying(false);\n                        return;\n                    }\n                    mp = new MediaPlayer();\n                    try {\n                        mp.setDataSource(getItem(getBindingAdapterPosition()).getFileAddress());\n                        mp.prepareAsync();\n                        mp.setOnPreparedListener(mp -> {\n                            mp.start();\n                            getAudioSeeker(serverAudioBinding.wave).start();\n                            this.serverAudioBinding.setIsPlaying(true);\n                        });\n                        mp.setOnCompletionListener(mp -> this.serverAudioBinding.setIsPlaying(false));\n                        mp.setOnErrorListener((mp, what, extra) -> {\n                            this.serverAudioBinding.setIsPlaying(false);\n                            return false;\n                        });\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                } else {\n                    downloadRequest = FileHelper.downloadFile(context, getItem(getBindingAdapterPosition()).getFileAddress(),\n                            getItem(getBindingAdapterPosition()).getTitle(),\n                            downloadListenerCreator(serverAudioBinding.imageViewCheckmark, null, serverAudioBinding.wave));\n                    if (downloadRequest != null)\n                        downloadManager.add(downloadRequest);\n                }\n            });\n        }\n\n        public ConversationViewHolder(ViewConversationServerFileBinding serverFileBinding) {\n            super(serverFileBinding.getRoot());\n            this.serverFileBinding = serverFileBinding;\n            this.serverFileBinding.frameLayoutFile.setOnClickListener(v -> {\n                if (getBindingAdapterPosition() == -1 || getItem(getBindingAdapterPosition()) == null)\n                    return;\n                FileHelper.openFile(context, getItem(getBindingAdapterPosition()).getFileAddress(), getItem(getBindingAdapterPosition()).getTitle());\n            });\n        }\n\n        //LAWONE CONSTRUCTORS\n        public ConversationViewHolder(LawoneConversationClientBinding clientTextBinding) {\n            super(clientTextBinding.getRoot());\n            this.lawoneClientTextBinding = clientTextBinding;\n            try {\n                if (getBindingAdapterPosition() != -1 && getItem(getBindingAdapterPosition()) != null && getItem(getBindingAdapterPosition()).getImageRes().length() > 0)\n                    this.lawoneClientTextBinding.imageViewAvatar.setImageResource(Integer.parseInt(getItem(getBindingAdapterPosition()).getImageRes()));\n            } catch (Exception e) {e.printStackTrace();}\n        }\n\n        public ConversationViewHolder(LawoneConversationServerBinding serverTextBinding) {\n            super(serverTextBinding.getRoot());\n            this.lawoneServerTextBinding = serverTextBinding;\n            try {\n                if (getBindingAdapterPosition() != -1 && getItem(getBindingAdapterPosition()) != null && getItem(getBindingAdapterPosition()).getImageRes().length() > 0)\n                    this.lawoneServerTextBinding.imageViewAvatar.setImageResource(Integer.parseInt(getItem(getBindingAdapterPosition()).getImageRes()));\n            } catch (Exception e) {e.printStackTrace();}\n        }\n\n        public ConversationViewHolder(LawoneConversationClientImageBinding clientImageBinding) {\n            super(clientImageBinding.getRoot());\n            this.lawoneClientImageBinding = clientImageBinding;\n            this.lawoneClientImageBinding.imageViewImage.setOnClickListener(v -> {\n                if (getBindingAdapterPosition() == -1 || getItem(getBindingAdapterPosition()) == null)\n                    return;\n                FileHelper.openUrl(context, getItem(getBindingAdapterPosition()).getFileAddress());\n            });\n        }\n\n        public ConversationViewHolder(LawoneConversationClientFileBinding clientFileBinding) {\n            super(clientFileBinding.getRoot());\n            this.lawoneClientFileBinding = clientFileBinding;\n            try {\n                if (getBindingAdapterPosition() != -1 && getItem(getBindingAdapterPosition()) != null && getItem(getBindingAdapterPosition()).getImageRes().length() > 0)\n                    this.lawoneClientFileBinding.imageViewAvatar.setImageResource(Integer.parseInt(getItem(getBindingAdapterPosition()).getImageRes()));\n            } catch (Exception e) {e.printStackTrace();}\n            this.lawoneClientFileBinding.frameLayoutFile.setOnClickListener(v -> {\n                if (getBindingAdapterPosition() == -1 || getItem(getBindingAdapterPosition()) == null)\n                    return;\n                if (!PermissionHelper.checkStoragePermission(context)) {\n                    new PermissionDialog(context, () -> conversationListListener.requestStoragePermission()).show();\n                    return;\n                }\n                if (FileHelper.checkFileExistence(context, getItem(getBindingAdapterPosition()).getTitle())) {\n                    Uri fileUri = FileHelper.getFileUri(context, getItem(getBindingAdapterPosition()).getTitle());\n                    String type = FileHelper.getMimeType(context, fileUri);\n                    if (type.contains(\"/\") && type.split(\"/\")[1].equals(\"pdf\"))\n                        activatePdfInterface(fileUri);\n                    else\n                        FileHelper.openFile(context, getItem(getBindingAdapterPosition()).getFileAddress(), getItem(getBindingAdapterPosition()).getTitle());\n                } else {\n                    downloadRequest = FileHelper.downloadFile(context, getItem(getBindingAdapterPosition()).getFileAddress(),\n                            getItem(getBindingAdapterPosition()).getTitle(),\n                            downloadListenerCreator(lawoneClientFileBinding.imageViewCheckmark, lawoneClientFileBinding.progressbarLoading, null));\n                    if (downloadRequest != null)\n                        downloadManager.add(downloadRequest);\n                }\n            });\n        }\n\n        public ConversationViewHolder(LawoneConversationServerImageBinding serverImageBinding) {\n            super(serverImageBinding.getRoot());\n            this.lawoneServerImageBinding = serverImageBinding;\n            this.lawoneServerImageBinding.imageViewImage.setOnClickListener(v -> {\n                if (getBindingAdapterPosition() == -1 || getItem(getBindingAdapterPosition()) == null)\n                    return;\n                FileHelper.openUrl(context, getItem(getBindingAdapterPosition()).getFileAddress());\n            });\n        }\n\n        public ConversationViewHolder(LawoneConversationClientAudioBinding clientAudioBinding) {\n            super(clientAudioBinding.getRoot());\n            this.lawoneClientAudioBinding = clientAudioBinding;\n            this.lawoneClientAudioBinding.setIsPlaying(false);\n            try {\n                if (getBindingAdapterPosition() != -1 && getItem(getBindingAdapterPosition()) != null && getItem(getBindingAdapterPosition()).getImageRes().length() > 0)\n                    this.lawoneClientAudioBinding.imageViewAvatar.setImageResource(Integer.parseInt(getItem(getBindingAdapterPosition()).getImageRes()));\n            } catch (Exception e) {e.printStackTrace();}\n            this.lawoneClientAudioBinding.frameLayoutFile.setOnClickListener(v -> {\n                if (getBindingAdapterPosition() == -1 || getItem(getBindingAdapterPosition()) == null)\n                    return;\n\n                if (!PermissionHelper.checkStoragePermission(context)) {\n                    new PermissionDialog(context, () -> conversationListListener.requestStoragePermission()).show();\n                    return;\n                }\n                if (FileHelper.checkFileExistence(context, getItem(getBindingAdapterPosition()).getTitle())) {\n                    try {\n                        if (mp != null && mp.isPlaying()) {\n                            mp.stop();\n                            mp.release();\n                            if (lawoneClientAudioBinding.getIsPlaying()) {\n                                lawoneClientAudioBinding.setIsPlaying(false);\n                                return;\n                            }\n                        }\n                        mp = new MediaPlayer();\n                        mp.setDataSource(getItem(getBindingAdapterPosition()).getFileAddress());\n                        mp.prepareAsync();\n                        mp.setOnPreparedListener(mp -> {\n                            mp.start();\n                            getAudioSeeker(lawoneClientAudioBinding.wave).start();\n                            lawoneClientAudioBinding.setIsPlaying(true);\n                        });\n                        mp.setOnCompletionListener(mp -> lawoneClientAudioBinding.setIsPlaying(false));\n                        mp.setOnErrorListener((mp, what, extra) -> {\n                            lawoneClientAudioBinding.setIsPlaying(false);\n                            return false;\n                        });\n                    } catch (Exception e) {\n                        mp = new MediaPlayer();\n                        Log.e(\"tag\", \"ConversationViewHolder: \" + e.getCause());\n                        e.printStackTrace();\n                    }\n                } else {\n                    downloadRequest = FileHelper.downloadFile(context, getItem(getBindingAdapterPosition()).getFileAddress(),\n                            getItem(getBindingAdapterPosition()).getTitle(),\n                            downloadListenerCreator(lawoneClientAudioBinding.imageViewCheckmark, lawoneClientAudioBinding.progressbarLoading, lawoneClientAudioBinding.wave));\n                    if (downloadRequest != null)\n                        downloadManager.add(downloadRequest);\n                }\n            });\n        }\n\n        public ConversationViewHolder(LawoneConversationServerAudioBinding serverAudioBinding) {\n            super(serverAudioBinding.getRoot());\n            this.lawoneServerAudioBinding = serverAudioBinding;\n            try {\n                if (getBindingAdapterPosition() != -1 && getItem(getBindingAdapterPosition()) != null && getItem(getBindingAdapterPosition()).getImageRes().length() > 0)\n                    this.lawoneServerAudioBinding.imageViewAvatar.setImageResource(Integer.parseInt(getItem(getBindingAdapterPosition()).getImageRes()));\n            } catch (Exception e) {e.printStackTrace();}\n            this.lawoneServerAudioBinding.setIsPlaying(false);\n            this.lawoneServerAudioBinding.frameLayoutFile.setOnClickListener(v -> {\n                if (getBindingAdapterPosition() == -1 || getItem(getBindingAdapterPosition()) == null)\n                    return;\n                if (!PermissionHelper.checkStoragePermission(context)) {\n                    new PermissionDialog(context, () -> conversationListListener.requestStoragePermission()).show();\n                    return;\n                }\n                if (FileHelper.checkFileExistence(context, getItem(getBindingAdapterPosition()).getTitle())) {\n                    if (mp != null && mp.isPlaying()) {\n                        mp.stop();\n                        mp.release();\n                        if (lawoneClientAudioBinding.getIsPlaying()) {\n                            lawoneClientAudioBinding.setIsPlaying(false);\n                            return;\n                        }\n                    }\n                    mp = new MediaPlayer();\n                    try {\n                        lawoneServerAudioBinding.imageViewPlay.setImageDrawable(context.getDrawable(R.drawable.ic_pause));\n                        mp.setDataSource(getItem(getBindingAdapterPosition()).getFileAddress());\n                        mp.prepareAsync();\n                        mp.setOnPreparedListener(mp -> {\n                            mp.start();\n                            getAudioSeeker(lawoneServerAudioBinding.wave).start();\n                            lawoneServerAudioBinding.setIsPlaying(true);\n                        });\n                        mp.setOnCompletionListener(mp -> lawoneServerAudioBinding.setIsPlaying(false));\n                        mp.setOnErrorListener((mp, what, extra) -> {\n                            lawoneServerAudioBinding.setIsPlaying(false);\n                            return false;\n                        });\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                } else {\n                    downloadRequest = FileHelper.downloadFile(context, getItem(getBindingAdapterPosition()).getFileAddress(),\n                            getItem(getBindingAdapterPosition()).getTitle(),\n                            downloadListenerCreator(lawoneServerAudioBinding.imageViewCheckmark, lawoneServerAudioBinding.progressbarLoading, lawoneServerAudioBinding.wave));\n                    if (downloadRequest != null)\n                        downloadManager.add(downloadRequest);\n                }\n            });\n        }\n\n        public ConversationViewHolder(LawoneConversationServerFileBinding serverFileBinding) {\n            super(serverFileBinding.getRoot());\n            this.lawoneServerFileBinding = serverFileBinding;\n            try {\n                if (getBindingAdapterPosition() != -1 && getItem(getBindingAdapterPosition()) != null && getItem(getBindingAdapterPosition()).getImageRes().length() > 0)\n                    this.lawoneServerFileBinding.imageViewAvatar.setImageResource(Integer.parseInt(getItem(getBindingAdapterPosition()).getImageRes()));\n            } catch (Exception e) {e.printStackTrace();}\n            this.lawoneServerFileBinding.frameLayoutFile.setOnClickListener(v -> {\n                if (getBindingAdapterPosition() == -1 || getItem(getBindingAdapterPosition()) == null)\n                    return;\n                if (!PermissionHelper.checkStoragePermission(context)) {\n                    new PermissionDialog(context, () -> conversationListListener.requestStoragePermission()).show();\n                    return;\n                }\n                if (FileHelper.checkFileExistence(context, getItem(getBindingAdapterPosition()).getTitle())) {\n                    Uri fileUri = FileHelper.getFileUri(context, getItem(getBindingAdapterPosition()).getTitle());\n                    String type = FileHelper.getMimeType(context, fileUri);\n                    if (type.contains(\"/\") && type.split(\"/\")[1].equals(\"pdf\"))\n                        activatePdfInterface(fileUri);\n                    else\n                        FileHelper.openFile(context, getItem(getBindingAdapterPosition()).getFileAddress(), getItem(getBindingAdapterPosition()).getTitle());\n                } else {\n                    downloadRequest = FileHelper.downloadFile(context, getItem(getBindingAdapterPosition()).getFileAddress(),\n                            getItem(getBindingAdapterPosition()).getTitle(),\n                            downloadListenerCreator(lawoneServerFileBinding.imageViewCheckmark, lawoneServerFileBinding.progressbarLoading, null));\n                    if (downloadRequest != null)\n                        downloadManager.add(downloadRequest);\n                }\n            });\n        }\n\n        public ConversationViewHolder(LawoneConversationSystemBinding lawoneConversationSystemBinding) {\n            super(lawoneConversationSystemBinding.getRoot());\n            this.lawoneConversationSystemBinding = lawoneConversationSystemBinding;\n        }\n    }\n\n    private void activatePdfInterface(Uri fileUri) {\n        conversationListListener.pdfFileClicked(fileUri);\n    }\n\n    public void stopMediaPlayer() {\n        if (mp != null) {\n            if (mp.isPlaying()) {\n                mp.stop();\n            }\n            mp.release();\n            mp = null;\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chatkitlight/src/main/java/ir/vasl/chatkitlight/ui/adapter/ConversationAdapter.java	(revision 465eff28d3ea9c4b49a9a1186a90321f70e45200)
+++ chatkitlight/src/main/java/ir/vasl/chatkitlight/ui/adapter/ConversationAdapter.java	(date 1610537273000)
@@ -1134,6 +1134,8 @@
                             return false;
                         });
                     } catch (Exception e) {
+                        mp = new MediaPlayer();
+                        Log.e("tag", "ConversationViewHolder: " + e.getCause());
                         e.printStackTrace();
                     }
                 } else {

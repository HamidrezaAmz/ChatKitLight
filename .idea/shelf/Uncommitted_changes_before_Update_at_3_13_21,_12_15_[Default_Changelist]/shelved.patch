Index: app/src/main/java/ir/vasl/samplechatkit/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ir.vasl.samplechatkit;\n\nimport android.Manifest;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.Parcelable;\nimport android.util.Log;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.Toast;\n\nimport androidx.annotation.Nullable;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.appcompat.widget.Toolbar;\nimport androidx.core.app.ActivityCompat;\nimport androidx.lifecycle.ViewModelProvider;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.UUID;\n\nimport droidninja.filepicker.FilePickerBuilder;\nimport ir.vasl.chatkitlight.database.DatabaseLayer;\nimport ir.vasl.chatkitlight.model.ConversationModel;\nimport ir.vasl.chatkitlight.ui.audio.AttachmentOption;\nimport ir.vasl.chatkitlight.ui.callback.ConversationViewListener;\nimport ir.vasl.chatkitlight.ui.customview.ImageViewCustom;\nimport ir.vasl.chatkitlight.ui.view.ConversationView;\nimport ir.vasl.chatkitlight.utils.TimeUtils;\nimport ir.vasl.chatkitlight.utils.globalEnums.ConversationStatus;\nimport ir.vasl.chatkitlight.utils.globalEnums.ConversationType;\nimport ir.vasl.chatkitlight.utils.globalEnums.FileType;\nimport ir.vasl.chatkitlight.viewmodel.ConversationListViewModel;\nimport ir.vasl.chatkitlight.viewmodel.factory.ConversationListViewModelFactory;\n\npublic class MainActivity\n        extends AppCompatActivity\n        implements ConversationViewListener {\n\n    private Toolbar toolbar;\n    private ConversationListViewModel conversationListViewModel;\n    private ConversationView conversationView;\n    private PermissionHelper permissionHelper;\n\n    private static final String chatID = \"tempChatId\";\n    private static final String TAG = \"MainActivity\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        LocaleHelper.setApplicationLanguage(this);\n\n        setContentView(R.layout.activity_main);\n\n        toolbar = findViewById(R.id.toolbar);\n        conversationView = findViewById(R.id.conversationView);\n\n        setSupportActionBar(toolbar);\n\n        initViewModel();\n\n        conversationView.setShowBlockerView(true); // block input\n        conversationView.showHintView(\"این رو بخون بعد بگو متوجه شدم\", \"kha\"); // hint view\n    }\n\n    @Override\n    protected void attachBaseContext(Context newBase) {\n        super.attachBaseContext(newBase);\n        LocaleHelper.onAttach(newBase);\n    }\n\n    private void initViewModel() {\n        conversationListViewModel = new ViewModelProvider(this, new ConversationListViewModelFactory(getApplication(), chatID)).get(ConversationListViewModel.class);\n        conversationView.setConversationListViewModel(conversationListViewModel);\n        conversationView.setConversationViewListener(this);\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.main_menu, menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        // Handle item selection\n        switch (item.getItemId()) {\n            case R.id.menu_delete:\n                conversationListViewModel.removeAllConversationModel();\n                return true;\n            default:\n                return super.onOptionsItemSelected(item);\n        }\n    }\n\n    int tester = 0;\n\n    @Override\n    public void onSubmit(CharSequence input) {\n        tester++;\n\n        List<ConversationModel> allModels = DatabaseLayer.getInstance(MyApplication.getApp()).getChatKitDatabase().getChatDao().getAllSimple(chatID);\n\n        ConversationModel conversationModel = new ConversationModel(chatID, UUID.randomUUID().toString());\n        conversationModel.setTitle(\"\");\n        conversationModel.setMessage(input.toString());\n        conversationModel.setTime(TimeUtils.getCurrTime());\n        if (tester % 3 == 0) {\n            conversationModel.setConversationType(ConversationType.CLIENT);\n        } else if (tester % 3 == 1) {\n            conversationModel.setConversationType(ConversationType.SERVER);\n        } else if (tester % 3 == 2) {\n            conversationModel.setConversationType(ConversationType.SYSTEM);\n        }\n        if (tester % 5 == 0) {\n            conversationModel.setFileType(FileType.NONE);\n        } else if (tester % 5 == 1) {\n            conversationModel.setFileType(FileType.AUDIO);\n        } else if (tester % 5 == 2) {\n            conversationModel.setFileType(FileType.NONE);\n        } else if (tester % 5 == 3) {\n            conversationModel.setFileType(FileType.IMAGE);\n        } else if (tester % 5 == 4) {\n            conversationModel.setFileType(FileType.DOCUMENT);\n        }\n        conversationModel.setConversationStatus(ConversationStatus.DELIVERED);\n//        conversationModel.setFileAddress(\"https://www.w3schools.com/howto/img_avatar.png\");\n        conversationModel.setImageRes(\"2\");\n//        if (imageUri != null) {\n//            conversationModel.setFileAddress(imageUri.toString());\n        conversationModel.setFileAddress(\"https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf\");\n//        conversationModel.setFileAddress(\"https://www.kozco.com/tech/piano2.wav\");\n//        conversationModel.setFileAddress(\"https://www.kozco.com/tech/organfinale.wav\");\n        conversationModel.setFileType(FileType.DOCUMENT);\n        conversationModel.setConversationType(ConversationType.CLIENT);\n\n        findViewById(R.id.image2).setVisibility(View.GONE);\n//        }\n\n        conversationListViewModel.addNewConversation(conversationModel);\n\n        new CountDownTimer(2000, 1000) {\n\n            public void onTick(long millisUntilFinished) {\n                Log.i(\"OnTick\", \"seconds remaining: \" + millisUntilFinished / 1000);\n            }\n\n            public void onFinish() {\n                List<ConversationModel> allModels = DatabaseLayer.getInstance(MyApplication.getApp()).getChatKitDatabase().getChatDao().getAllSimple(chatID);\n\n                for (int i = 0; i < allModels.size(); i++) {\n                    Log.e(TAG, \"AFTER SUBMIT: \" + allModels.get(i).getId() + \" \" + allModels.get(i).getMessage());\n                }\n                conversationListViewModel.updateConversationStatus(conversationModel.getConversationId(), ConversationStatus.SENT);\n            }\n\n        }.start();\n\n        new CountDownTimer(3500, 1000) {\n\n            public void onTick(long millisUntilFinished) {\n                Log.i(\"OnTick\", \"seconds remaining: \" + millisUntilFinished / 1000);\n            }\n\n            public void onFinish() {\n                conversationListViewModel.updateConversationStatus(conversationModel.getConversationId(), ConversationStatus.DELIVERED);\n            }\n\n        }.start();\n\n        new CountDownTimer(5000, 1000) {\n\n            public void onTick(long millisUntilFinished) {\n                Log.i(\"OnTick\", \"seconds remaining: \" + millisUntilFinished / 1000);\n            }\n\n            public void onFinish() {\n                conversationListViewModel.updateConversationStatus(conversationModel.getConversationId(), ConversationStatus.SEEN);\n            }\n\n        }.start();\n\n    }\n\n    @Override\n    public void onCopyMessageClicked(Object object) {\n\n    }\n\n    @Override\n    public void onResendMessageClicked(Object object) {\n\n    }\n\n    @Override\n    public void onDeleteMessageClicked(Object object) {\n        if (object instanceof ConversationModel)\n            conversationListViewModel.removeConversationModel((ConversationModel) object);\n    }\n\n    @Override\n    public void onSwipeRefresh() {\n        conversationView.hideSwipeRefresh();\n        Log.e(TAG, \"onSwipeRefresh: \");\n    }\n\n    @Override\n    public void onAddAttachments(AttachmentOption option) {\n        if (!checkPermission())\n            return;\n        pickGallery();\n    }\n\n\n    private void pickGallery() {\n        FilePickerBuilder.getInstance()\n                .setActivityTheme(R.style.AppTheme) //optional\n                .enableVideoPicker(true)\n                .pickPhoto(this, 400);\n    }\n\n    private boolean checkPermission() {\n        permissionHelper = new PermissionHelper(this);\n        return permissionHelper.checkAccessStoragePermissionRead();\n    }\n\n    Uri imageUri;\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        ImageViewCustom image = findViewById(R.id.image2);\n        image.setVisibility(View.VISIBLE);\n        ArrayList<Parcelable> uri = data.getParcelableArrayListExtra(\"SELECTED_PHOTOS\");\n        image.setImageUrl(((Uri) uri.get(0)));\n        imageUri = ((Uri) uri.get(0));\n        Log.e(TAG, \"onActivityResult: \" + uri);\n\n    }\n\n    @Override\n    public void pdfFileClicked(Uri pdfUri) {\n        Log.e(TAG, \"pdfFileClicked: \" + pdfUri);\n    }\n\n    @Override\n    public void requestStoragePermission() {\n        ActivityCompat.requestPermissions(this,\n                new String[]{Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE},\n                199);\n    }\n\n    @Override\n    public void onVoiceRecordCanceled() {\n        Toast.makeText(this, \"CANCEL\", Toast.LENGTH_SHORT).show();\n    }\n\n    @Override\n    public void onVoiceRecordStarted() {\n        Toast.makeText(this, \"START\", Toast.LENGTH_SHORT).show();\n    }\n\n    @Override\n    public void onVoiceRecordStopped(long recordTime) {\n        Toast.makeText(this, \"STOP\", Toast.LENGTH_SHORT).show();\n    }\n\n    @Override\n    public void onHintViewCloseButtonClicked() {\n        Toast.makeText(this, \"we have closed hint view\", Toast.LENGTH_SHORT).show();\n    }\n\n    @Override\n    public void onBackPressed() {\n        super.onBackPressed();\n        conversationView.stopMediaPlayer();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ir/vasl/samplechatkit/MainActivity.java	(revision f4b7935ad3e9f2191d32424a910e0b8bfffeb0f9)
+++ app/src/main/java/ir/vasl/samplechatkit/MainActivity.java	(date 1615624802000)
@@ -63,8 +63,8 @@
 
         initViewModel();
 
-        conversationView.setShowBlockerView(true); // block input
-        conversationView.showHintView("این رو بخون بعد بگو متوجه شدم", "kha"); // hint view
+        conversationView.setShowBlockerView(false); // block input
+        conversationView.showHintView("این رو بخون بعد بگو متوجه شدم", "متوجه شدم"); // hint view
     }
 
     @Override
@@ -127,7 +127,7 @@
         } else if (tester % 5 == 4) {
             conversationModel.setFileType(FileType.DOCUMENT);
         }
-        conversationModel.setConversationStatus(ConversationStatus.DELIVERED);
+        conversationModel.setConversationStatus(ConversationStatus.SENDING);
 //        conversationModel.setFileAddress("https://www.w3schools.com/howto/img_avatar.png");
         conversationModel.setImageRes("2");
 //        if (imageUri != null) {
@@ -135,11 +135,10 @@
         conversationModel.setFileAddress("https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf");
 //        conversationModel.setFileAddress("https://www.kozco.com/tech/piano2.wav");
 //        conversationModel.setFileAddress("https://www.kozco.com/tech/organfinale.wav");
-        conversationModel.setFileType(FileType.DOCUMENT);
+        conversationModel.setFileType(FileType.NONE);
         conversationModel.setConversationType(ConversationType.CLIENT);
 
         findViewById(R.id.image2).setVisibility(View.GONE);
-//        }
 
         conversationListViewModel.addNewConversation(conversationModel);
 
@@ -214,8 +213,7 @@
             return;
         pickGallery();
     }
-
-
+    
     private void pickGallery() {
         FilePickerBuilder.getInstance()
                 .setActivityTheme(R.style.AppTheme) //optional
Index: chatkitlight/src/main/java/ir/vasl/chatkitlight/ui/adapter/ConversationAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ir.vasl.chatkitlight.ui.adapter;\n\nimport android.content.Context;\nimport android.media.MediaPlayer;\nimport android.net.Uri;\nimport android.os.CountDownTimer;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ProgressBar;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.appcompat.widget.AppCompatImageView;\nimport androidx.databinding.DataBindingUtil;\nimport androidx.paging.PagedList;\nimport androidx.paging.PagedListAdapter;\n\nimport com.thin.downloadmanager.DownloadRequest;\nimport com.thin.downloadmanager.DownloadStatusListenerV1;\nimport com.thin.downloadmanager.ThinDownloadManager;\n\nimport ir.vasl.chatkitlight.R;\nimport ir.vasl.chatkitlight.databinding.LawoneConversationClientAudioBinding;\nimport ir.vasl.chatkitlight.databinding.LawoneConversationClientBinding;\nimport ir.vasl.chatkitlight.databinding.LawoneConversationClientFileBinding;\nimport ir.vasl.chatkitlight.databinding.LawoneConversationClientImageBinding;\nimport ir.vasl.chatkitlight.databinding.LawoneConversationServerAudioBinding;\nimport ir.vasl.chatkitlight.databinding.LawoneConversationServerBinding;\nimport ir.vasl.chatkitlight.databinding.LawoneConversationServerFileBinding;\nimport ir.vasl.chatkitlight.databinding.LawoneConversationServerImageBinding;\nimport ir.vasl.chatkitlight.databinding.LawoneConversationSystemBinding;\nimport ir.vasl.chatkitlight.databinding.ViewConversationClientAudioBinding;\nimport ir.vasl.chatkitlight.databinding.ViewConversationClientBinding;\nimport ir.vasl.chatkitlight.databinding.ViewConversationClientFileBinding;\nimport ir.vasl.chatkitlight.databinding.ViewConversationClientImageBinding;\nimport ir.vasl.chatkitlight.databinding.ViewConversationClientVideoBinding;\nimport ir.vasl.chatkitlight.databinding.ViewConversationEmptyBinding;\nimport ir.vasl.chatkitlight.databinding.ViewConversationServerAudioBinding;\nimport ir.vasl.chatkitlight.databinding.ViewConversationServerBinding;\nimport ir.vasl.chatkitlight.databinding.ViewConversationServerFileBinding;\nimport ir.vasl.chatkitlight.databinding.ViewConversationServerImageBinding;\nimport ir.vasl.chatkitlight.databinding.ViewConversationServerVideoBinding;\nimport ir.vasl.chatkitlight.databinding.ViewConversationUnsupportedBinding;\nimport ir.vasl.chatkitlight.model.ConversationModel;\nimport ir.vasl.chatkitlight.ui.base.BaseViewHolder;\nimport ir.vasl.chatkitlight.ui.callback.ConversationListListener;\nimport ir.vasl.chatkitlight.ui.dialogs.PermissionDialog;\nimport ir.vasl.chatkitlight.utils.ConversationDiffCallback;\nimport ir.vasl.chatkitlight.utils.FileHelper;\nimport ir.vasl.chatkitlight.utils.PermissionHelper;\nimport ir.vasl.chatkitlight.utils.globalEnums.ChatStyleEnum;\nimport ir.vasl.chatkitlight.utils.globalEnums.ConversationType;\nimport me.itangqi.waveloadingview.WaveLoadingView;\nimport rm.com.audiowave.AudioWaveView;\n\nimport static ir.vasl.chatkitlight.utils.globalEnums.ConversationType.SYSTEM;\n\n@SuppressWarnings(\"rawtypes\")\npublic class ConversationAdapter extends PagedListAdapter<ConversationModel, BaseViewHolder> implements ConversationListListener {\n\n    private ConversationListListener conversationListListener;\n    private ChatStyleEnum chatStyleEnum;\n    private Context context; // for permission, storage management and intent initialization\n    private ThinDownloadManager downloadManager; // one dl mgr for the whole list\n    static MediaPlayer mp; //Media Player to play voices and audios\n    private int lastPlayingPos = -1;\n\n    public ConversationAdapter(ConversationListListener conversationListListener, ChatStyleEnum chatStyleEnum) {\n        super(new ConversationDiffCallback());\n        this.setHasStableIds(true);\n        this.chatStyleEnum = chatStyleEnum;\n        this.conversationListListener = conversationListListener;\n        this.downloadManager = new ThinDownloadManager();\n    }\n\n    @NonNull\n    @Override\n    public BaseViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        context = parent.getContext();\n        LayoutInflater inflater = LayoutInflater.from(parent.getContext());\n        switch (chatStyleEnum) {\n            case DEFAULT:\n            case ARMAN_VARZESH:\n                return AvViewHolderCreator(parent, inflater, viewType);\n            case LAWONE:\n                return LawoneViewHolderCreator(parent, inflater, viewType);\n        }\n        return null; //chatStyle is non-defined? impossible\n    }\n\n    @Override\n    public long getItemId(int position) { //todo -> must be unique\n        return position;\n    }\n\n    @Override\n    public void onBindViewHolder(@NonNull BaseViewHolder holder, int position) {\n        if (getCurrentList() == null || getCurrentList().snapshot().size() == 0 || getItem(position) == null)\n            return;\n\n        switch (chatStyleEnum) {\n            case DEFAULT:\n            case ARMAN_VARZESH:\n                AvBinder(holder, position);\n                break;\n            case LAWONE:\n                LawoneBinder(holder, position);\n                break;\n        }\n    }\n\n    private void LawoneBinder(BaseViewHolder holder, int position) {\n        if(holder.getItemViewType() >= 100000){\n                ConversationModel model = getItem(position);\n                ((ConversationViewHolder) holder).lawoneConversationSystemBinding.setConversationModel(model);\n                ((ConversationViewHolder) holder).lawoneConversationSystemBinding.setConversationListListener(this);\n        } else if (holder.getItemViewType() >= 10000) {\n            switch (ConversationType.get(holder.getItemViewType() - 10000)) {\n                case CLIENT: {\n                    ConversationModel model = getItem(position);\n                    holder.onBind(position);\n                    ((ConversationViewHolder) holder).lawoneClientAudioBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).lawoneClientAudioBinding.setIsPlaying(model.isPlaying());\n//                    getAudioSeeker(((ConversationViewHolder) holder).lawoneClientAudioBinding.wave, position).cancel();\n                    ((ConversationViewHolder) holder).lawoneClientAudioBinding.wave.setProgress(0);\n                    ((ConversationViewHolder) holder).lawoneClientAudioBinding.setConversationListListener(this);\n                    break;\n                }\n\n                case SERVER: {\n                    ConversationModel model = getItem(position);\n                    holder.onBind(position);\n                    ((ConversationViewHolder) holder).lawoneServerAudioBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).lawoneServerAudioBinding.setIsPlaying(model.isPlaying());\n//                    getAudioSeeker(((ConversationViewHolder) holder).lawoneServerAudioBinding.wave, position).cancel();\n                    ((ConversationViewHolder) holder).lawoneServerAudioBinding.wave.setProgress(0);\n                    ((ConversationViewHolder) holder).lawoneServerAudioBinding.setConversationListListener(this);\n                    break;\n                }\n                case EMPTY:\n                    ((ConversationViewHolder) holder).emptyBinding.setConversationListListener(this);\n                    break;\n\n                case SYSTEM:\n                    ConversationModel model = getItem(position);\n                    ((ConversationViewHolder) holder).lawoneConversationSystemBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).lawoneConversationSystemBinding.setConversationListListener(this);\n                    break;\n\n                case UNDEFINE:\n                default:\n                    ((ConversationViewHolder) holder).unsupportedBinding.setConversationListListener(this);\n                    break;\n            }\n        } else if (holder.getItemViewType() >= 1000) {\n            switch (ConversationType.get(holder.getItemViewType() - 1000)) {\n                case CLIENT: {\n                    ConversationModel model = getItem(position);\n                    holder.onBind(position);\n                    ((ConversationViewHolder) holder).lawoneClientImageBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).lawoneClientImageBinding.setConversationListListener(this);\n                    ((ConversationViewHolder) holder).lawoneClientImageBinding.imageViewImage.setImageUrlCurve(getItem(position).getFileAddress(), 12);\n                    break;\n                }\n                case SERVER: {\n                    ConversationModel model = getItem(position);\n                    holder.onBind(position);\n                    ((ConversationViewHolder) holder).lawoneServerImageBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).lawoneServerImageBinding.setConversationListListener(this);\n                    ((ConversationViewHolder) holder).lawoneServerImageBinding.imageViewImage.setImageUrlCurve(getItem(position).getFileAddress(), 12);\n                    break;\n                }\n                case EMPTY:\n                    ((ConversationViewHolder) holder).emptyBinding.setConversationListListener(this);\n                    break;\n\n                case SYSTEM:\n                    ConversationModel model = getItem(position);\n                    ((ConversationViewHolder) holder).lawoneConversationSystemBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).lawoneConversationSystemBinding.setConversationListListener(this);\n                    break;\n\n                case UNDEFINE:\n                default:\n                    ((ConversationViewHolder) holder).unsupportedBinding.setConversationListListener(this);\n                    break;\n            }\n        } else if (holder.getItemViewType() >= 100) {\n            switch (ConversationType.get(holder.getItemViewType() - 100)) {\n                case CLIENT: {\n                    ConversationModel model = getItem(position);\n                    holder.onBind(position);\n                    ((ConversationViewHolder) holder).clientVideoBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).clientVideoBinding.setConversationListListener(this);\n                    ((ConversationViewHolder) holder).clientVideoBinding.imageViewImage.setImageUrlCurve(getItem(position).getFileAddress(), 12);\n                    break;\n                }\n                case SERVER: {\n                    ConversationModel model = getItem(position);\n                    holder.onBind(position);\n                    ((ConversationViewHolder) holder).serverVideoBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).serverVideoBinding.setConversationListListener(this);\n                    ((ConversationViewHolder) holder).serverVideoBinding.imageViewImage.setImageUrlCurve(getItem(position).getFileAddress(), 12);\n\n                    break;\n                }\n                case SYSTEM:\n                    ConversationModel model = getItem(position);\n                    ((ConversationViewHolder) holder).lawoneConversationSystemBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).lawoneConversationSystemBinding.setConversationListListener(this);\n                    break;\n                case EMPTY:\n                    ((ConversationViewHolder) holder).emptyBinding.setConversationListListener(this);\n                    break;\n                case UNDEFINE:\n                default:\n                    ((ConversationViewHolder) holder).unsupportedBinding.setConversationListListener(this);\n                    break;\n            }\n        } else if (holder.getItemViewType() >= 10) {\n            switch (ConversationType.get(holder.getItemViewType() - 10)) {\n                case CLIENT: {\n                    ConversationModel model = getItem(position);\n                    holder.onBind(position);\n                    ((ConversationViewHolder) holder).lawoneClientFileBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).lawoneClientFileBinding.setConversationListListener(this);\n                    break;\n                }\n                case SERVER: {\n                    ConversationModel model = getItem(position);\n                    holder.onBind(position);\n                    ((ConversationViewHolder) holder).lawoneServerFileBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).lawoneServerFileBinding.setConversationListListener(this);\n                    break;\n                }\n                case SYSTEM:\n                    ConversationModel model = getItem(position);\n                    ((ConversationViewHolder) holder).lawoneConversationSystemBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).lawoneConversationSystemBinding.setConversationListListener(this);\n                    break;\n                case EMPTY:\n                    ((ConversationViewHolder) holder).emptyBinding.setConversationListListener(this);\n                    break;\n                case UNDEFINE:\n                default:\n                    ((ConversationViewHolder) holder).unsupportedBinding.setConversationListListener(this);\n                    break;\n            }\n        } else {\n            switch (ConversationType.get(holder.getItemViewType())) {\n                case CLIENT: {\n                    ConversationModel model = getItem(position);\n                    holder.onBind(position);\n                    ((ConversationViewHolder) holder).lawoneClientTextBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).lawoneClientTextBinding.setConversationListListener(this);\n                    break;\n                }\n                case SERVER: {\n                    ConversationModel model = getItem(position);\n                    holder.onBind(position);\n                    ((ConversationViewHolder) holder).lawoneServerTextBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).lawoneServerTextBinding.setConversationListListener(this);\n                    break;\n                }\n                case EMPTY:\n                    ((ConversationViewHolder) holder).emptyBinding.setConversationListListener(this);\n                    break;\n                case SYSTEM:\n                    ConversationModel model = getItem(position);\n                    ((ConversationViewHolder) holder).lawoneConversationSystemBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).lawoneConversationSystemBinding.setConversationListListener(this);\n                    break;\n                case UNDEFINE:\n                default:\n                    ((ConversationViewHolder) holder).unsupportedBinding.setConversationListListener(this);\n                    break;\n            }\n        }\n    }\n\n    private void AvBinder(BaseViewHolder holder, int position) {\n        if (holder.getItemViewType() >= 10000) {\n            switch (ConversationType.get(holder.getItemViewType() - 10000)) {\n                case CLIENT: {\n                    ConversationModel model = getItem(position);\n                    holder.onBind(position);\n                    ((ConversationViewHolder) holder).clientAudioBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).clientAudioBinding.setConversationListListener(this);\n                    break;\n                }\n                case SERVER: {\n                    ConversationModel model = getItem(position);\n                    ((ConversationViewHolder) holder).serverAudioBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).serverAudioBinding.setConversationListListener(this);\n                    break;\n                }\n                case EMPTY:\n                    ((ConversationViewHolder) holder).emptyBinding.setConversationListListener(this);\n                    break;\n                case UNDEFINE:\n                default:\n                    ((ConversationViewHolder) holder).unsupportedBinding.setConversationListListener(this);\n                    break;\n            }\n        } else if (holder.getItemViewType() >= 1000) {\n            switch (ConversationType.get(holder.getItemViewType() - 1000)) {\n                case CLIENT: {\n                    ConversationModel model = getItem(position);\n                    holder.onBind(position);\n                    ((ConversationViewHolder) holder).clientImageBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).clientImageBinding.setConversationListListener(this);\n                    ((ConversationViewHolder) holder).clientImageBinding.imageViewImage.setImageUrlCurve(getItem(position).getFileAddress(), 12);\n                    break;\n                }\n                case SERVER: {\n                    ConversationModel model = getItem(position);\n                    ((ConversationViewHolder) holder).serverImageBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).serverImageBinding.setConversationListListener(this);\n                    ((ConversationViewHolder) holder).serverImageBinding.imageViewImage.setImageUrlCurve(getItem(position).getFileAddress(), 12);\n\n                    break;\n                }\n\n                case EMPTY:\n                    ((ConversationViewHolder) holder).emptyBinding.setConversationListListener(this);\n                    break;\n\n                case UNDEFINE:\n                default:\n                    ((ConversationViewHolder) holder).unsupportedBinding.setConversationListListener(this);\n                    break;\n            }\n        } else if (holder.getItemViewType() >= 100) {\n            switch (ConversationType.get(holder.getItemViewType() - 100)) {\n                case CLIENT: {\n                    ConversationModel model = getItem(position);\n                    holder.onBind(position);\n                    ((ConversationViewHolder) holder).clientVideoBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).clientVideoBinding.setConversationListListener(this);\n                    ((ConversationViewHolder) holder).clientVideoBinding.imageViewImage.setImageUrlCurve(getItem(position).getFileAddress(), 12);\n\n                    break;\n                }\n\n                case SERVER: {\n                    ConversationModel model = getItem(position);\n                    ((ConversationViewHolder) holder).serverVideoBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).serverVideoBinding.setConversationListListener(this);\n                    ((ConversationViewHolder) holder).serverVideoBinding.imageViewImage.setImageUrlCurve(getItem(position).getFileAddress(), 12);\n\n                    break;\n                }\n\n                case EMPTY:\n                    ((ConversationViewHolder) holder).emptyBinding.setConversationListListener(this);\n                    break;\n\n                case UNDEFINE:\n                default:\n                    ((ConversationViewHolder) holder).unsupportedBinding.setConversationListListener(this);\n                    break;\n            }\n        } else if (holder.getItemViewType() >= 10) {\n            switch (ConversationType.get(holder.getItemViewType() - 10)) {\n                case CLIENT: {\n                    ConversationModel model = getItem(position);\n                    holder.onBind(position);\n                    ((ConversationViewHolder) holder).clientFileBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).clientFileBinding.setConversationListListener(this);\n                    break;\n                }\n\n                case SERVER: {\n                    ConversationModel model = getItem(position);\n                    ((ConversationViewHolder) holder).serverFileBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).serverFileBinding.setConversationListListener(this);\n                    break;\n                }\n\n                case EMPTY:\n                    ((ConversationViewHolder) holder).emptyBinding.setConversationListListener(this);\n                    break;\n\n                case UNDEFINE:\n                default:\n                    ((ConversationViewHolder) holder).unsupportedBinding.setConversationListListener(this);\n                    break;\n            }\n        } else {\n            switch (ConversationType.get(holder.getItemViewType())) {\n                case CLIENT: {\n                    ConversationModel model = getItem(position);\n                    holder.onBind(position);\n                    ((ConversationViewHolder) holder).clientTextBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).clientTextBinding.setConversationListListener(this);\n                    break;\n                }\n\n                case SERVER: {\n                    ConversationModel model = getItem(position);\n                    ((ConversationViewHolder) holder).serverTextBinding.setConversationModel(model);\n                    ((ConversationViewHolder) holder).serverTextBinding.setConversationListListener(this);\n                    break;\n                }\n\n                case EMPTY:\n                    ((ConversationViewHolder) holder).emptyBinding.setConversationListListener(this);\n                    break;\n\n                case UNDEFINE:\n                default:\n                    ((ConversationViewHolder) holder).unsupportedBinding.setConversationListListener(this);\n                    break;\n            }\n        }\n    }\n\n    @Override\n    public void submitList(@Nullable PagedList<ConversationModel> pagedList) {\n        super.submitList(pagedList);\n    }\n\n    @Override\n    public int getItemViewType(int position) {\n\n        if (getCurrentList() == null)\n            return ConversationType.EMPTY.getValue();\n\n        if (getCurrentList().snapshot().size() == 0)\n            return ConversationType.EMPTY.getValue();\n\n        if (getItem(position) == null)\n            return ConversationType.EMPTY.getValue();\n\n        ConversationModel model = getItem(position);\n\n        if (model == null || getItemCount() == 0)\n            return ConversationType.EMPTY.getValue();\n\n        if (getItem(position).getFileType() != null) {\n            switch (getItem(position).getFileType()) {\n                case NONE:\n                    return model.getConversationType().getValue();\n                case DOCUMENT:\n                case VIDEO:\n                case IMAGE:\n                case AUDIO:\n                    return model.getConversationType().getValue() + model.getFileType().getValue();\n            }\n        }\n        return model.getConversationType().getValue();\n    }\n\n    @Override\n    public int getItemCount() {\n\n        if (getCurrentList() == null || getCurrentList().snapshot().size() == 0)\n            return 1;\n\n        return getCurrentList().snapshot().size();\n    }\n\n    @Override\n    public void onConversationItemClicked(Object object) {\n        if (conversationListListener != null)\n            conversationListListener.onConversationItemClicked(object);\n    }\n\n    private BaseViewHolder LawoneViewHolderCreator(ViewGroup parent, LayoutInflater inflater, int viewType) {\n        Log.e(\"tag\", \"LawoneViewHolderCreator: \" + viewType);\n        if (viewType >= 10000) {\n            switch (ConversationType.get(viewType - 10000)) {\n                case CLIENT:\n                    LawoneConversationClientAudioBinding clientBinding = DataBindingUtil.inflate(inflater, R.layout.lawone_conversation_client_audio, parent, false);\n                    return new ConversationViewHolder(clientBinding);\n\n                case SERVER:\n                    LawoneConversationServerAudioBinding serverBinding = DataBindingUtil.inflate(inflater, R.layout.lawone_conversation_server_audio, parent, false);\n                    return new ConversationViewHolder(serverBinding);\n\n                case EMPTY:\n                    ViewConversationEmptyBinding emptyBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_empty, parent, false);\n                    return new ConversationViewHolder(emptyBinding);\n                case SYSTEM:\n                    LawoneConversationSystemBinding lawoneConversationSystemBinding = DataBindingUtil.inflate(inflater, R.layout.lawone_conversation_system, parent, false);\n                    return new ConversationViewHolder(lawoneConversationSystemBinding);\n                default:\n                    ViewConversationUnsupportedBinding unsupportedBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_unsupported, parent, false);\n                    return new ConversationViewHolder(unsupportedBinding);\n            }\n        } else if (viewType >= 1000) {\n            switch (ConversationType.get(viewType - 1000)) {\n                case CLIENT:\n                    LawoneConversationClientImageBinding clientBinding = DataBindingUtil.inflate(inflater, R.layout.lawone_conversation_client_image, parent, false);\n                    return new ConversationViewHolder(clientBinding);\n\n                case SERVER:\n                    LawoneConversationServerImageBinding serverBinding = DataBindingUtil.inflate(inflater, R.layout.lawone_conversation_server_image, parent, false);\n                    return new ConversationViewHolder(serverBinding);\n\n                case EMPTY:\n                    ViewConversationEmptyBinding emptyBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_empty, parent, false);\n                    return new ConversationViewHolder(emptyBinding);\n\n                case SYSTEM:\n                    LawoneConversationSystemBinding lawoneConversationSystemBinding = DataBindingUtil.inflate(inflater, R.layout.lawone_conversation_system, parent, false);\n                    return new ConversationViewHolder(lawoneConversationSystemBinding);\n\n                default:\n                    ViewConversationUnsupportedBinding unsupportedBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_unsupported, parent, false);\n                    return new ConversationViewHolder(unsupportedBinding);\n            }\n        } else if (viewType >= 100) {\n            switch (ConversationType.get(viewType - 100)) {\n                case CLIENT:\n                    ViewConversationClientVideoBinding clientBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_client_video, parent, false);\n                    return new ConversationViewHolder(clientBinding);\n\n                case SERVER:\n                    ViewConversationServerVideoBinding serverBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_server_video, parent, false);\n                    return new ConversationViewHolder(serverBinding);\n\n                case EMPTY:\n                    ViewConversationEmptyBinding emptyBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_empty, parent, false);\n                    return new ConversationViewHolder(emptyBinding);\n\n                case SYSTEM:\n                    LawoneConversationSystemBinding lawoneConversationSystemBinding = DataBindingUtil.inflate(inflater, R.layout.lawone_conversation_system, parent, false);\n                    return new ConversationViewHolder(lawoneConversationSystemBinding);\n\n                default:\n                    ViewConversationUnsupportedBinding unsupportedBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_unsupported, parent, false);\n                    return new ConversationViewHolder(unsupportedBinding);\n            }\n        } else if (viewType >= 10) {\n            switch (ConversationType.get(viewType - 10)) {\n                case CLIENT:\n                    LawoneConversationClientFileBinding clientBinding = DataBindingUtil.inflate(inflater, R.layout.lawone_conversation_client_file, parent, false);\n                    return new ConversationViewHolder(clientBinding);\n\n                case SERVER:\n                    LawoneConversationServerFileBinding serverBinding = DataBindingUtil.inflate(inflater, R.layout.lawone_conversation_server_file, parent, false);\n                    return new ConversationViewHolder(serverBinding);\n\n                case EMPTY:\n                    ViewConversationEmptyBinding emptyBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_empty, parent, false);\n                    return new ConversationViewHolder(emptyBinding);\n\n                case SYSTEM:\n                    LawoneConversationSystemBinding lawoneConversationSystemBinding = DataBindingUtil.inflate(inflater, R.layout.lawone_conversation_system, parent, false);\n                    return new ConversationViewHolder(lawoneConversationSystemBinding);\n\n                default:\n                    ViewConversationUnsupportedBinding unsupportedBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_unsupported, parent, false);\n                    return new ConversationViewHolder(unsupportedBinding);\n            }\n        } else {\n            switch (ConversationType.get(viewType)) {\n                case CLIENT:\n                    LawoneConversationClientBinding clientBinding = DataBindingUtil.inflate(inflater, R.layout.lawone_conversation_client, parent, false);\n                    return new ConversationViewHolder(clientBinding);\n\n                case SERVER:\n                    LawoneConversationServerBinding serverBinding = DataBindingUtil.inflate(inflater, R.layout.lawone_conversation_server, parent, false);\n                    return new ConversationViewHolder(serverBinding);\n\n                case EMPTY:\n                    ViewConversationEmptyBinding emptyBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_empty, parent, false);\n                    return new ConversationViewHolder(emptyBinding);\n\n                case SYSTEM:\n                    LawoneConversationSystemBinding lawoneConversationSystemBinding = DataBindingUtil.inflate(inflater, R.layout.lawone_conversation_system, parent, false);\n                    return new ConversationViewHolder(lawoneConversationSystemBinding);\n\n                default:\n                    ViewConversationUnsupportedBinding unsupportedBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_unsupported, parent, false);\n                    return new ConversationViewHolder(unsupportedBinding);\n            }\n        }\n    }\n\n    private BaseViewHolder AvViewHolderCreator(ViewGroup parent, LayoutInflater inflater, int viewType) {\n        if (viewType >= 10000) {\n            switch (ConversationType.get(viewType - 10000)) {\n                case CLIENT:\n                    ViewConversationClientAudioBinding clientBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_client_audio, parent, false);\n                    return new ConversationViewHolder(clientBinding);\n\n                case SERVER:\n                    ViewConversationServerAudioBinding serverBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_server_audio, parent, false);\n                    return new ConversationViewHolder(serverBinding);\n\n                case EMPTY:\n                    ViewConversationEmptyBinding emptyBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_empty, parent, false);\n                    return new ConversationViewHolder(emptyBinding);\n\n                default:\n                    ViewConversationUnsupportedBinding unsupportedBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_unsupported, parent, false);\n                    return new ConversationViewHolder(unsupportedBinding);\n            }\n        } else if (viewType >= 1000) {\n            switch (ConversationType.get(viewType - 1000)) {\n                case CLIENT:\n                    ViewConversationClientImageBinding clientBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_client_image, parent, false);\n                    return new ConversationViewHolder(clientBinding);\n\n                case SERVER:\n                    ViewConversationServerImageBinding serverBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_server_image, parent, false);\n                    return new ConversationViewHolder(serverBinding);\n\n                case EMPTY:\n                    ViewConversationEmptyBinding emptyBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_empty, parent, false);\n                    return new ConversationViewHolder(emptyBinding);\n\n                default:\n                    ViewConversationUnsupportedBinding unsupportedBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_unsupported, parent, false);\n                    return new ConversationViewHolder(unsupportedBinding);\n            }\n        } else if (viewType >= 100) {\n            switch (ConversationType.get(viewType - 100)) {\n                case CLIENT:\n                    ViewConversationClientVideoBinding clientBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_client_video, parent, false);\n                    return new ConversationViewHolder(clientBinding);\n\n                case SERVER:\n                    ViewConversationServerVideoBinding serverBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_server_video, parent, false);\n                    return new ConversationViewHolder(serverBinding);\n\n                case EMPTY:\n                    ViewConversationEmptyBinding emptyBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_empty, parent, false);\n                    return new ConversationViewHolder(emptyBinding);\n\n                default:\n                    ViewConversationUnsupportedBinding unsupportedBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_unsupported, parent, false);\n                    return new ConversationViewHolder(unsupportedBinding);\n            }\n        } else if (viewType >= 10) {\n            switch (ConversationType.get(viewType - 10)) {\n                case CLIENT:\n                    ViewConversationClientFileBinding clientBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_client_file, parent, false);\n                    return new ConversationViewHolder(clientBinding);\n\n                case SERVER:\n                    ViewConversationServerFileBinding serverBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_server_file, parent, false);\n                    return new ConversationViewHolder(serverBinding);\n\n                case EMPTY:\n                    ViewConversationEmptyBinding emptyBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_empty, parent, false);\n                    return new ConversationViewHolder(emptyBinding);\n\n                default:\n                    ViewConversationUnsupportedBinding unsupportedBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_unsupported, parent, false);\n                    return new ConversationViewHolder(unsupportedBinding);\n            }\n        } else {\n            switch (ConversationType.get(viewType)) {\n                case CLIENT:\n                    ViewConversationClientBinding clientBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_client, parent, false);\n                    return new ConversationViewHolder(clientBinding);\n\n                case SERVER:\n                    ViewConversationServerBinding serverBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_server, parent, false);\n                    return new ConversationViewHolder(serverBinding);\n\n                case EMPTY:\n                    ViewConversationEmptyBinding emptyBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_empty, parent, false);\n                    return new ConversationViewHolder(emptyBinding);\n\n                default:\n                    ViewConversationUnsupportedBinding unsupportedBinding = DataBindingUtil.inflate(inflater, R.layout.view_conversation_unsupported, parent, false);\n                    return new ConversationViewHolder(unsupportedBinding);\n            }\n        }\n    }\n\n    public CountDownTimer getAudioSeeker(AudioWaveView wave, int pos) {\n        return new CountDownTimer(1000, 10) {\n            @Override\n            public void onTick(long millisUntilFinished) {\n                if (mp != null && wave != null)\n                    try {\n                        if (pos == lastPlayingPos)\n                            wave.setProgress(((int) ((((float) mp.getCurrentPosition()) / ((float) mp.getDuration())) * 100)));\n                        else wave.setProgress(0);\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n            }\n\n            @Override\n            public void onFinish() {\n                try {\n                    if (mp.isPlaying())\n                        this.start();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        };\n    }\n\n    private class ConversationViewHolder extends BaseViewHolder {\n        DownloadRequest downloadRequest = null; //download request for different file types\n\n        //DEFAULT - AV\n        private ViewConversationClientBinding clientTextBinding;\n        private ViewConversationClientImageBinding clientImageBinding;\n        private ViewConversationClientVideoBinding clientVideoBinding;\n        private ViewConversationClientAudioBinding clientAudioBinding;\n        private ViewConversationClientFileBinding clientFileBinding;\n\n        private ViewConversationServerBinding serverTextBinding;\n        private ViewConversationServerImageBinding serverImageBinding;\n        private ViewConversationServerVideoBinding serverVideoBinding;\n        private ViewConversationServerAudioBinding serverAudioBinding;\n        private ViewConversationServerFileBinding serverFileBinding;\n\n        private ViewConversationEmptyBinding emptyBinding;\n        private ViewConversationUnsupportedBinding unsupportedBinding;\n\n        //LAWONE\n        private LawoneConversationClientBinding lawoneClientTextBinding;\n        private LawoneConversationClientImageBinding lawoneClientImageBinding;\n        private LawoneConversationClientFileBinding lawoneClientFileBinding;\n        private LawoneConversationClientAudioBinding lawoneClientAudioBinding;\n\n        private LawoneConversationServerBinding lawoneServerTextBinding;\n        private LawoneConversationServerImageBinding lawoneServerImageBinding;\n        private LawoneConversationServerFileBinding lawoneServerFileBinding;\n        private LawoneConversationServerAudioBinding lawoneServerAudioBinding;\n\n        //SYSTEM\n        // private SystemConversationBinding systemConversationBinding;\n        private LawoneConversationSystemBinding lawoneConversationSystemBinding;\n\n        @Override\n        public void onBind(int position) {\n            super.onBind(position);\n            if (getItem(position) == null)\n                return;\n            if (lawoneClientTextBinding != null) {\n                try {\n                    if (position != -1 && getItem(position) != null && getItem(position).getImageRes().length() > 0)\n                        lawoneClientTextBinding.imageViewAvatar.setImageResource(getResId(getItem(position).getImageRes()));\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n            if (lawoneServerTextBinding != null) {\n                try {\n                    if (position != -1 && getItem(position) != null && getItem(position).getImageRes().length() > 0)\n                        lawoneServerTextBinding.imageViewAvatar.setImageResource(getResId(getItem(position).getImageRes()));\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n            if (lawoneClientFileBinding != null) { //client file\n                if (FileHelper.checkFileExistence(context, getItem(position).getTitle())) {\n                    downloadProgressDone(lawoneClientFileBinding.waveView, lawoneClientFileBinding.imageViewCheckmark);\n                }\n                try {\n                    if (position != -1 && getItem(position) != null && getItem(position).getImageRes().length() > 0)\n                        lawoneClientFileBinding.imageViewAvatar.setImageResource(getResId(getItem(position).getImageRes()));\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n            if (lawoneServerFileBinding != null) { //server file\n                if (FileHelper.checkFileExistence(context, getItem(position).getTitle())) {\n                    downloadProgressDone(lawoneServerFileBinding.waveView, lawoneServerFileBinding.imageViewCheckmark);\n                }\n                try {\n                    if (position != -1 && getItem(position) != null && getItem(position).getImageRes().length() > 0)\n                        lawoneServerFileBinding.imageViewAvatar.setImageResource(getResId(getItem(position).getImageRes()));\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n            if (lawoneClientAudioBinding != null) { //client audio\n                if (FileHelper.checkFileExistence(context, getItem(position).getTitle())) {\n                    downloadProgressDone(lawoneClientAudioBinding.waveView, null);\n                    lawoneClientAudioBinding.wave.setRawData(FileHelper.getFileBytes(context, getItem(getBindingAdapterPosition()).getTitle()));\n                }\n                try {\n                    if (position != -1 && getItem(position) != null && getItem(position).getImageRes().length() > 0)\n                        lawoneClientAudioBinding.imageViewAvatar.setImageResource(getResId(getItem(position).getImageRes()));\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n            if (lawoneServerAudioBinding != null) { //server audio\n                if (FileHelper.checkFileExistence(context, getItem(position).getTitle())) {\n                    downloadProgressDone(lawoneServerAudioBinding.waveView, null);\n                    lawoneServerAudioBinding.wave.setRawData(FileHelper.getFileBytes(context, getItem(getBindingAdapterPosition()).getTitle()));\n                }\n                try {\n                    if (position != -1 && getItem(position) != null && getItem(position).getImageRes().length() > 0)\n                        lawoneServerAudioBinding.imageViewAvatar.setImageResource(getResId(getItem(position).getImageRes()));\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n            if (clientAudioBinding != null) { //client audio\n                if (FileHelper.checkFileExistence(context, getItem(position).getTitle())) {\n                    downloadProgressDone(clientAudioBinding.waveView, null);\n                    clientAudioBinding.wave.setRawData(FileHelper.getFileBytes(context, getItem(getBindingAdapterPosition()).getTitle()));\n                }\n            }\n            if (serverAudioBinding != null) { //server audio\n                if (FileHelper.checkFileExistence(context, getItem(position).getTitle())) {\n                    downloadProgressDone(serverAudioBinding.waveView, null);\n                    serverAudioBinding.wave.setRawData(FileHelper.getFileBytes(context, getItem(getBindingAdapterPosition()).getTitle()));\n                }\n            }\n        }\n\n        //HELPER FUNCTIONS\n        private DownloadStatusListenerV1 downloadListenerCreator(AppCompatImageView imageViewCheckmark, ProgressBar loadingProgress, AudioWaveView wave, WaveLoadingView waveView) {\n            return new DownloadStatusListenerV1() {\n                @Override\n                public void onDownloadComplete(DownloadRequest downloadRequest) {\n                    imageViewCheckmark.setVisibility(View.VISIBLE);\n                    if (waveView != null)\n                        waveView.setWaveColor(context.getResources().getColor(R.color.green));\n                    if (loadingProgress != null)\n                        loadingProgress.setVisibility(View.GONE);\n                    if (wave != null) {\n                        wave.setRawData(FileHelper.getFileBytes(context, getItem(getBindingAdapterPosition()).getTitle()));\n                        wave.performClick();\n                    }\n                }\n\n                @Override\n                public void onDownloadFailed(DownloadRequest downloadRequest, int errorCode, String errorMessage) {\n                    if (loadingProgress != null)\n                        loadingProgress.setVisibility(View.GONE);\n                    if (waveView != null)\n                        waveView.setCenterTitle(context.getString(R.string.download));\n                }\n\n                @Override\n                public void onProgress(DownloadRequest downloadRequest, long totalBytes, long downloadedBytes, int progress) {\n                    if (waveView != null) {\n                        waveView.setCenterTitle(\"\");\n                        waveView.setProgressValue(progress);\n                        waveView.startAnimation();\n                    }\n                    if (loadingProgress != null)\n                        loadingProgress.setVisibility(View.VISIBLE);\n                }\n            };\n        }\n\n        private void downloadProgressDone(WaveLoadingView waveView, AppCompatImageView imageCheck) {\n            if (waveView != null) {\n                waveView.setCenterTitle(\"\");\n                waveView.setProgressValue(100);\n                waveView.setWaveColor(context.getResources().getColor(R.color.green));\n                if (imageCheck != null)\n                    imageCheck.setVisibility(View.VISIBLE);\n            }\n        }\n\n        // DEFAULT - AV CONSTRUCTORS\n        public ConversationViewHolder(ViewConversationClientBinding clientTextBinding) {\n            super(clientTextBinding.getRoot());\n            this.clientTextBinding = clientTextBinding;\n        }\n\n        public ConversationViewHolder(ViewConversationServerBinding serverTextBinding) {\n            super(serverTextBinding.getRoot());\n            this.serverTextBinding = serverTextBinding;\n        }\n\n        public ConversationViewHolder(ViewConversationEmptyBinding emptyBinding) {\n            super(emptyBinding.getRoot());\n            this.emptyBinding = emptyBinding;\n        }\n\n        public ConversationViewHolder(ViewConversationUnsupportedBinding unsupportedBinding) {\n            super(unsupportedBinding.getRoot());\n            this.unsupportedBinding = unsupportedBinding;\n        }\n\n        public ConversationViewHolder(ViewConversationClientImageBinding clientImageBinding) {\n            super(clientImageBinding.getRoot());\n            this.clientImageBinding = clientImageBinding;\n            this.clientImageBinding.imageViewImage.setOnClickListener(v -> {\n                if (getBindingAdapterPosition() == -1 || getItem(getBindingAdapterPosition()) == null)\n                    return;\n                FileHelper.openFile(context, getItem(getBindingAdapterPosition()).getFileAddress(), getItem(getBindingAdapterPosition()).getTitle());\n            });\n        }\n\n        public ConversationViewHolder(ViewConversationClientVideoBinding clientVideoBinding) {\n            super(clientVideoBinding.getRoot());\n            this.clientVideoBinding = clientVideoBinding;\n            this.clientVideoBinding.imageViewImage.setOnClickListener(v -> {\n                if (getBindingAdapterPosition() == -1 || getItem(getBindingAdapterPosition()) == null)\n                    return;\n                FileHelper.openFile(context, getItem(getBindingAdapterPosition()).getFileAddress(), getItem(getBindingAdapterPosition()).getTitle());\n            });\n        }\n\n        public ConversationViewHolder(ViewConversationClientAudioBinding clientAudioBinding) {\n            super(clientAudioBinding.getRoot());\n            this.clientAudioBinding = clientAudioBinding;\n            this.clientAudioBinding.setIsPlaying(false);\n            this.clientAudioBinding.frameLayoutFile.setOnClickListener(v -> {\n                if (getBindingAdapterPosition() == -1 || getItem(getBindingAdapterPosition()) == null)\n                    return;\n                if (!PermissionHelper.checkStoragePermission(context)) {\n                    new PermissionDialog(context, () -> conversationListListener.requestStoragePermission()).show();\n                    return;\n                }\n                if (FileHelper.checkFileExistence(context, getItem(getBindingAdapterPosition()).getTitle())) {\n                    if (this.clientAudioBinding.getIsPlaying()) {\n                        mp.pause();\n                        this.clientAudioBinding.setIsPlaying(false);\n                        return;\n                    }\n                    mp = new MediaPlayer();\n                    try {\n                        mp.setDataSource(getItem(getBindingAdapterPosition()).getFileAddress());\n                        mp.prepareAsync();\n                        mp.setOnPreparedListener(mp -> {\n                            mp.start();\n                            this.clientAudioBinding.setIsPlaying(true);\n                            getAudioSeeker(this.clientAudioBinding.wave, getCurrentPosition()).start();\n                        });\n                        mp.setOnCompletionListener(mp -> this.clientAudioBinding.setIsPlaying(false));\n                        mp.setOnErrorListener((mp, what, extra) -> {\n                            this.clientAudioBinding.setIsPlaying(false);\n                            return false;\n                        });\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                } else {\n                    downloadRequest = FileHelper.downloadFile(context, getItem(getBindingAdapterPosition()).getFileAddress(),\n                            getItem(getBindingAdapterPosition()).getTitle(),\n                            downloadListenerCreator(clientAudioBinding.imageViewCheckmark, null, clientAudioBinding.wave, null));\n                    if (downloadRequest != null)\n                        downloadManager.add(downloadRequest);\n                }\n            });\n        }\n\n        public ConversationViewHolder(ViewConversationClientFileBinding clientFileBinding) {\n            super(clientFileBinding.getRoot());\n            this.clientFileBinding = clientFileBinding;\n            this.clientFileBinding.frameLayoutFile.setOnClickListener(v -> {\n                if (getBindingAdapterPosition() == -1 || getItem(getBindingAdapterPosition()) == null)\n                    return;\n                FileHelper.openFile(context, getItem(getBindingAdapterPosition()).getFileAddress(), getItem(getBindingAdapterPosition()).getTitle());\n            });\n        }\n\n        public ConversationViewHolder(ViewConversationServerImageBinding serverImageBinding) {\n            super(serverImageBinding.getRoot());\n            this.serverImageBinding = serverImageBinding;\n            this.serverImageBinding.imageViewImage.setOnClickListener(v -> {\n                if (getBindingAdapterPosition() == -1 || getItem(getBindingAdapterPosition()) == null)\n                    return;\n                FileHelper.openFile(context, getItem(getBindingAdapterPosition()).getFileAddress(), getItem(getBindingAdapterPosition()).getTitle());\n            });\n        }\n\n        public ConversationViewHolder(ViewConversationServerVideoBinding serverVideoBinding) {\n            super(serverVideoBinding.getRoot());\n            this.serverVideoBinding = serverVideoBinding;\n            this.serverVideoBinding.imageViewImage.setOnClickListener(v -> {\n                if (getBindingAdapterPosition() == -1 || getItem(getBindingAdapterPosition()) == null)\n                    return;\n                FileHelper.openFile(context, getItem(getBindingAdapterPosition()).getFileAddress(), getItem(getBindingAdapterPosition()).getTitle());\n            });\n        }\n\n        public ConversationViewHolder(ViewConversationServerAudioBinding serverAudioBinding) {\n            super(serverAudioBinding.getRoot());\n            this.serverAudioBinding = serverAudioBinding;\n            this.serverAudioBinding.setIsPlaying(false);\n            this.serverAudioBinding.frameLayoutFile.setOnClickListener(v -> {\n                if (getBindingAdapterPosition() == -1 || getItem(getBindingAdapterPosition()) == null)\n                    return;\n                if (!PermissionHelper.checkStoragePermission(context)) {\n                    new PermissionDialog(context, () -> conversationListListener.requestStoragePermission()).show();\n                    return;\n                }\n                if (FileHelper.checkFileExistence(context, getItem(getBindingAdapterPosition()).getTitle())) {\n                    if (this.serverAudioBinding.getIsPlaying()) {\n                        mp.pause();\n                        this.serverAudioBinding.setIsPlaying(false);\n                        return;\n                    }\n                    mp = new MediaPlayer();\n                    try {\n                        mp.setDataSource(getItem(getBindingAdapterPosition()).getFileAddress());\n                        mp.prepareAsync();\n                        mp.setOnPreparedListener(mp -> {\n                            mp.start();\n                            this.serverAudioBinding.setIsPlaying(true);\n                            getAudioSeeker(serverAudioBinding.wave, getCurrentPosition()).start();\n                        });\n                        mp.setOnCompletionListener(mp -> this.serverAudioBinding.setIsPlaying(false));\n                        mp.setOnErrorListener((mp, what, extra) -> {\n                            this.serverAudioBinding.setIsPlaying(false);\n                            return false;\n                        });\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                } else {\n                    downloadRequest = FileHelper.downloadFile(context, getItem(getBindingAdapterPosition()).getFileAddress(),\n                            getItem(getBindingAdapterPosition()).getTitle(),\n                            downloadListenerCreator(serverAudioBinding.imageViewCheckmark, null, serverAudioBinding.wave, null));\n                    if (downloadRequest != null)\n                        downloadManager.add(downloadRequest);\n                }\n            });\n        }\n\n        public ConversationViewHolder(ViewConversationServerFileBinding serverFileBinding) {\n            super(serverFileBinding.getRoot());\n            this.serverFileBinding = serverFileBinding;\n            this.serverFileBinding.frameLayoutFile.setOnClickListener(v -> {\n                if (getBindingAdapterPosition() == -1 || getItem(getBindingAdapterPosition()) == null)\n                    return;\n                FileHelper.openFile(context, getItem(getBindingAdapterPosition()).getFileAddress(), getItem(getBindingAdapterPosition()).getTitle());\n            });\n        }\n\n        //LAWONE CONSTRUCTORS\n        public ConversationViewHolder(LawoneConversationClientBinding clientTextBinding) {\n            super(clientTextBinding.getRoot());\n            this.lawoneClientTextBinding = clientTextBinding;\n        }\n\n        public ConversationViewHolder(LawoneConversationServerBinding serverTextBinding) {\n            super(serverTextBinding.getRoot());\n            this.lawoneServerTextBinding = serverTextBinding;\n        }\n\n        public ConversationViewHolder(LawoneConversationClientImageBinding clientImageBinding) {\n            super(clientImageBinding.getRoot());\n            this.lawoneClientImageBinding = clientImageBinding;\n            this.lawoneClientImageBinding.imageViewImage.setOnClickListener(v -> {\n                if (getBindingAdapterPosition() == -1 || getItem(getBindingAdapterPosition()) == null)\n                    return;\n                FileHelper.openUrl(context, getItem(getBindingAdapterPosition()).getFileAddress());\n            });\n        }\n\n        public ConversationViewHolder(LawoneConversationClientFileBinding clientFileBinding) {\n            super(clientFileBinding.getRoot());\n            this.lawoneClientFileBinding = clientFileBinding;\n            this.lawoneClientFileBinding.frameLayoutFile.setOnClickListener(v -> {\n                if (getBindingAdapterPosition() == -1 || getItem(getBindingAdapterPosition()) == null)\n                    return;\n                if (!PermissionHelper.checkStoragePermission(context)) {\n                    new PermissionDialog(context, () -> conversationListListener.requestStoragePermission()).show();\n                    return;\n                }\n                if (FileHelper.checkFileExistence(context, getItem(getBindingAdapterPosition()).getTitle())) {\n                    Uri fileUri = FileHelper.getFileUri(context, getItem(getBindingAdapterPosition()).getTitle());\n                    String type = FileHelper.getMimeType(context, fileUri);\n                    if (type.contains(\"/\") && type.split(\"/\")[1].equals(\"pdf\"))\n                        activatePdfInterface(fileUri);\n                    else\n                        FileHelper.openFile(context, getItem(getBindingAdapterPosition()).getFileAddress(), getItem(getBindingAdapterPosition()).getTitle());\n                } else {\n                    try {\n                        downloadRequest = FileHelper.downloadFile(context, getItem(getBindingAdapterPosition()).getFileAddress(),\n                                getItem(getBindingAdapterPosition()).getTitle(),\n                                downloadListenerCreator(lawoneClientFileBinding.imageViewCheckmark, lawoneClientFileBinding.progressbarLoading, null, lawoneClientFileBinding.waveView));\n                        if (downloadRequest != null)\n                            downloadManager.add(downloadRequest);\n                    } catch (Exception e) {\n                        Log.e(\"tag\", \"ConversationViewHolder: \" + e);\n                    }\n                }\n            });\n        }\n\n        public ConversationViewHolder(LawoneConversationServerImageBinding serverImageBinding) {\n            super(serverImageBinding.getRoot());\n            this.lawoneServerImageBinding = serverImageBinding;\n            this.lawoneServerImageBinding.imageViewImage.setOnClickListener(v -> {\n                if (getBindingAdapterPosition() == -1 || getItem(getBindingAdapterPosition()) == null)\n                    return;\n                FileHelper.openUrl(context, getItem(getBindingAdapterPosition()).getFileAddress());\n            });\n        }\n\n        public ConversationViewHolder(LawoneConversationClientAudioBinding clientAudioBinding) {\n            super(clientAudioBinding.getRoot());\n            this.lawoneClientAudioBinding = clientAudioBinding;\n            this.lawoneClientAudioBinding.setIsPlaying(false);\n            this.lawoneClientAudioBinding.frameLayoutFile.setOnClickListener(v -> {\n                if (getBindingAdapterPosition() == -1 || getItem(getBindingAdapterPosition()) == null)\n                    return;\n                if (lastPlayingPos != -1) {\n                    getCurrentList().snapshot().get(lastPlayingPos).setPlaying(false);\n                    notifyItemChanged(lastPlayingPos);\n                }\n                if (!PermissionHelper.checkStoragePermission(context)) {\n                    new PermissionDialog(context, () -> conversationListListener.requestStoragePermission()).show();\n                    return;\n                }\n                if (FileHelper.checkFileExistence(context, getItem(getBindingAdapterPosition()).getTitle())) {\n                    try {\n                        if (mp != null && mp.isPlaying()) {\n                            mp.stop();\n                            mp.release();\n                            if (lawoneClientAudioBinding.getIsPlaying()) {\n                                lawoneClientAudioBinding.setIsPlaying(false);\n                                lastPlayingPos = -1;\n                                return;\n                            }\n                        }\n                        mp = new MediaPlayer();\n                        mp.setDataSource(getItem(getBindingAdapterPosition()).getFileAddress());\n                        mp.prepareAsync();\n                        mp.setOnPreparedListener(mp -> {\n\n                            mp.start();\n                            lawoneClientAudioBinding.setIsPlaying(true);\n                            getAudioSeeker(lawoneClientAudioBinding.wave, getCurrentPosition()).start();\n                            lastPlayingPos = getCurrentPosition();\n                        });\n                        mp.setOnCompletionListener(mp -> {\n                            lawoneClientAudioBinding.setIsPlaying(false);\n                            lastPlayingPos = -1;\n                        });\n                        mp.setOnErrorListener((mp, what, extra) -> {\n                            lawoneClientAudioBinding.setIsPlaying(false);\n                            lastPlayingPos = -1;\n                            return false;\n                        });\n                    } catch (Exception e) {\n                        mp = new MediaPlayer();\n                        Log.e(\"TAG\", \"ConversationViewHolder: \" + e.getCause());\n                        e.printStackTrace();\n                    }\n                } else {\n                    try {\n                        downloadRequest = FileHelper.downloadFile(context, getItem(getBindingAdapterPosition()).getFileAddress(),\n                                getItem(getBindingAdapterPosition()).getTitle(),\n                                downloadListenerCreator(lawoneClientAudioBinding.imageViewCheckmark, lawoneClientAudioBinding.progressbarLoading, lawoneClientAudioBinding.wave, null));\n                        if (downloadRequest != null)\n                            downloadManager.add(downloadRequest);\n                    } catch (Exception e) {\n                        Log.e(\"TAG\", \"ConversationViewHolder: \" + e.getMessage());\n                    }\n                }\n            });\n        }\n\n        public ConversationViewHolder(LawoneConversationServerAudioBinding serverAudioBinding) {\n            super(serverAudioBinding.getRoot());\n            this.lawoneServerAudioBinding = serverAudioBinding;\n            this.lawoneServerAudioBinding.setIsPlaying(false);\n            this.lawoneServerAudioBinding.frameLayoutFile.setOnClickListener(v -> {\n                if (getBindingAdapterPosition() == -1 || getItem(getBindingAdapterPosition()) == null)\n                    return;\n                if (lastPlayingPos != -1) {\n                    getCurrentList().snapshot().get(lastPlayingPos).setPlaying(false);\n                    notifyItemChanged(lastPlayingPos);\n                }\n                if (!PermissionHelper.checkStoragePermission(context)) {\n                    new PermissionDialog(context, () -> conversationListListener.requestStoragePermission()).show();\n                    return;\n                }\n                if (FileHelper.checkFileExistence(context, getItem(getBindingAdapterPosition()).getTitle())) {\n                    if (mp != null && mp.isPlaying()) {\n                        mp.stop();\n                        mp.release();\n                        if (lawoneClientAudioBinding.getIsPlaying()) {\n                            lawoneClientAudioBinding.setIsPlaying(false);\n                            lastPlayingPos = -1;\n                            return;\n                        }\n                    }\n                    mp = new MediaPlayer();\n                    try {\n                        lawoneServerAudioBinding.imageViewPlay.setImageDrawable(context.getDrawable(R.drawable.ic_pause));\n                        mp.setDataSource(getItem(getBindingAdapterPosition()).getFileAddress());\n                        mp.prepareAsync();\n                        mp.setOnPreparedListener(mp -> {\n                            if (lastPlayingPos != -1) {\n                                getCurrentList().snapshot().get(lastPlayingPos).setPlaying(false);\n                                notifyItemChanged(lastPlayingPos);\n                            }\n                            mp.start();\n                            lawoneServerAudioBinding.setIsPlaying(true);\n                            getAudioSeeker(lawoneServerAudioBinding.wave, getCurrentPosition()).start();\n                            lastPlayingPos = getCurrentPosition();\n                        });\n                        mp.setOnCompletionListener(mp -> {\n                            lawoneServerAudioBinding.setIsPlaying(false);\n                            lastPlayingPos = -1;\n                        });\n                        mp.setOnErrorListener((mp, what, extra) -> {\n                            lawoneServerAudioBinding.setIsPlaying(false);\n                            lastPlayingPos = -1;\n                            return false;\n                        });\n                    } catch (Exception e) {\n                        mp = new MediaPlayer();\n                        Log.e(\"tag\", \"ConversationViewHolder: \" + e.getCause());\n                        e.printStackTrace();\n                    }\n                } else {\n                    downloadRequest = FileHelper.downloadFile(context, getItem(getBindingAdapterPosition()).getFileAddress(),\n                            getItem(getBindingAdapterPosition()).getTitle(),\n                            downloadListenerCreator(lawoneServerAudioBinding.imageViewCheckmark, lawoneServerAudioBinding.progressbarLoading, lawoneServerAudioBinding.wave, null));\n                    if (downloadRequest != null)\n                        downloadManager.add(downloadRequest);\n                }\n            });\n        }\n\n        public ConversationViewHolder(LawoneConversationServerFileBinding serverFileBinding) {\n            super(serverFileBinding.getRoot());\n            this.lawoneServerFileBinding = serverFileBinding;\n            this.lawoneServerFileBinding.frameLayoutFile.setOnClickListener(v -> {\n                if (getBindingAdapterPosition() == -1 || getItem(getBindingAdapterPosition()) == null)\n                    return;\n                if (!PermissionHelper.checkStoragePermission(context)) {\n                    new PermissionDialog(context, () -> conversationListListener.requestStoragePermission()).show();\n                    return;\n                }\n                if (FileHelper.checkFileExistence(context, getItem(getBindingAdapterPosition()).getTitle())) {\n                    Uri fileUri = FileHelper.getFileUri(context, getItem(getBindingAdapterPosition()).getTitle());\n                    String type = FileHelper.getMimeType(context, fileUri);\n                    if (type.contains(\"/\") && type.split(\"/\")[1].equals(\"pdf\"))\n                        activatePdfInterface(fileUri);\n                    else\n                        FileHelper.openFile(context, getItem(getBindingAdapterPosition()).getFileAddress(), getItem(getBindingAdapterPosition()).getTitle());\n                } else {\n                    downloadRequest = FileHelper.downloadFile(context, getItem(getBindingAdapterPosition()).getFileAddress(),\n                            getItem(getBindingAdapterPosition()).getTitle(),\n                            downloadListenerCreator(lawoneServerFileBinding.imageViewCheckmark, lawoneServerFileBinding.progressbarLoading, null, lawoneServerFileBinding.waveView));\n                    if (downloadRequest != null)\n                        downloadManager.add(downloadRequest);\n                }\n            });\n        }\n\n        public ConversationViewHolder(LawoneConversationSystemBinding lawoneConversationSystemBinding) {\n            super(lawoneConversationSystemBinding.getRoot());\n            this.lawoneConversationSystemBinding = lawoneConversationSystemBinding;\n        }\n    }\n\n    private void activatePdfInterface(Uri fileUri) {\n        conversationListListener.pdfFileClicked(fileUri);\n    }\n\n    public void stopMediaPlayer() {\n        if (mp != null) {\n            if (mp.isPlaying()) {\n                mp.stop();\n            }\n            mp.release();\n            mp = null;\n            lastPlayingPos = -1;\n        }\n    }\n\n    public int getResId(String num) {\n        int index = Integer.parseInt(num);\n        switch (index) {\n            case 0:\n                return R.drawable.ic_avatar_0;\n            case 1:\n                return R.drawable.ic_avatar_1;\n            case 2:\n                return R.drawable.ic_avatar_2;\n            case 3:\n                return R.drawable.ic_avatar_3;\n            case 4:\n                return R.drawable.ic_avatar_4;\n            case 5:\n                return R.drawable.ic_avatar_5;\n            default:\n                return -1;\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chatkitlight/src/main/java/ir/vasl/chatkitlight/ui/adapter/ConversationAdapter.java	(revision f4b7935ad3e9f2191d32424a910e0b8bfffeb0f9)
+++ chatkitlight/src/main/java/ir/vasl/chatkitlight/ui/adapter/ConversationAdapter.java	(date 1615365089000)
@@ -55,14 +55,12 @@
 import me.itangqi.waveloadingview.WaveLoadingView;
 import rm.com.audiowave.AudioWaveView;
 
-import static ir.vasl.chatkitlight.utils.globalEnums.ConversationType.SYSTEM;
-
 @SuppressWarnings("rawtypes")
 public class ConversationAdapter extends PagedListAdapter<ConversationModel, BaseViewHolder> implements ConversationListListener {
 
+    private Context context; // for permission, storage management and intent initialization
     private ConversationListListener conversationListListener;
     private ChatStyleEnum chatStyleEnum;
-    private Context context; // for permission, storage management and intent initialization
     private ThinDownloadManager downloadManager; // one dl mgr for the whole list
     static MediaPlayer mp; //Media Player to play voices and audios
     private int lastPlayingPos = -1;
@@ -112,10 +110,10 @@
     }
 
     private void LawoneBinder(BaseViewHolder holder, int position) {
-        if(holder.getItemViewType() >= 100000){
-                ConversationModel model = getItem(position);
-                ((ConversationViewHolder) holder).lawoneConversationSystemBinding.setConversationModel(model);
-                ((ConversationViewHolder) holder).lawoneConversationSystemBinding.setConversationListListener(this);
+        if (holder.getItemViewType() >= 100000) {
+            ConversationModel model = getItem(position);
+            ((ConversationViewHolder) holder).lawoneConversationSystemBinding.setConversationModel(model);
+            ((ConversationViewHolder) holder).lawoneConversationSystemBinding.setConversationListListener(this);
         } else if (holder.getItemViewType() >= 10000) {
             switch (ConversationType.get(holder.getItemViewType() - 10000)) {
                 case CLIENT: {
Index: chatkitlight/src/main/java/ir/vasl/chatkitlight/ui/view/ConversationList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ir.vasl.chatkitlight.ui.view;\n\nimport android.content.Context;\nimport android.net.Uri;\nimport android.os.Handler;\nimport android.util.AttributeSet;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport ir.vasl.chatkitlight.ui.adapter.ConversationAdapter;\nimport ir.vasl.chatkitlight.ui.callback.ConversationListListener;\nimport ir.vasl.chatkitlight.ui.callback.DialogMenuListener;\nimport ir.vasl.chatkitlight.ui.dialogs.DialogChatMenu;\nimport ir.vasl.chatkitlight.utils.globalEnums.ChatStyleEnum;\nimport ir.vasl.chatkitlight.viewmodel.ConversationListViewModel;\n\n@SuppressWarnings(\"rawtypes\")\npublic class ConversationList\n        extends RecyclerView\n        implements ConversationListListener, DialogMenuListener {\n\n    public ConversationAdapter adapter;\n    private ConversationListViewModel conversationListViewModel;\n    private DialogMenuListener dialogMenuListener;\n    private ChatStyleEnum chatStyle = ChatStyleEnum.DEFAULT;\n    private boolean canShowDialog = false;\n    private int oldHeight;\n\n    @SuppressWarnings(\"FieldCanBeLocal\")\n    private int clientBubbleColor = -1; //todo -> this is going to be a custom attr\n    @SuppressWarnings(\"FieldCanBeLocal\")\n    private int serverBubbleColor = -1; //todo -> this is going to be a custom attr\n\n    public ConversationList(@NonNull Context context) {\n        super(context);\n    }\n\n    public ConversationList(@NonNull Context context, @Nullable AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    public ConversationList(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n    }\n\n    public void initialize() {\n\n        this.setHasFixedSize(false);\n        this.setNestedScrollingEnabled(false);\n\n        LinearLayoutManager layoutManager = new LinearLayoutManager(getContext());\n        layoutManager.setOrientation(LinearLayoutManager.VERTICAL);\n        layoutManager.setReverseLayout(true);\n        layoutManager.setStackFromEnd(false);\n        layoutManager.setSmoothScrollbarEnabled(false);\n\n        this.adapter = new ConversationAdapter(this, chatStyle);\n        this.setLayoutManager(layoutManager);\n        this.addOnScrollListener(scrollListener);\n        this.setItemAnimator(null);\n        this.setAdapter(adapter);\n        this.adapter.notifyDataSetChanged();\n    }\n\n    public void setConversationListViewModel(ConversationListViewModel conversationListViewModel) {\n        this.conversationListViewModel = conversationListViewModel;\n        initViewModel();\n    }\n\n    public void stopMediaPlayer(){\n        adapter.stopMediaPlayer();\n    }\n\n    private void initViewModel() {\n\n        if (conversationListViewModel == null)\n            return;\n\n        conversationListViewModel.getLiveData().observeForever(conversationModels -> {\n            adapter.submitList(null);\n            adapter.submitList(conversationModels);\n        });\n    }\n\n    public void scroll(int pos, long delay){\n        new Handler().postDelayed(() -> scrollToPosition(pos), delay);\n    }\n\n    public void setDialogMenuListener(DialogMenuListener dialogMenuListener) {\n        this.dialogMenuListener = dialogMenuListener;\n    }\n\n    public void setCanShowDialog(boolean canShowDialog) {\n        this.canShowDialog = canShowDialog;\n    }\n\n    public void setClientBubbleColor(int clientBubbleColor) {\n        this.clientBubbleColor = clientBubbleColor;\n    }\n\n    public ChatStyleEnum getChatStyle() {\n        return chatStyle;\n    }\n\n    public void setChatStyle(ChatStyleEnum chatStyle) {\n        this.chatStyle = chatStyle;\n    }\n\n    public void setServerBubbleColor(int serverBubbleColor) {\n        this.serverBubbleColor = serverBubbleColor;\n    }\n\n    @Override\n    public void onConversationItemClicked(Object object) {\n        if (!canShowDialog || getContext() == null)\n            return;\n        DialogChatMenu dialogChatMenu = new DialogChatMenu(getContext());\n        dialogChatMenu.setMenuItem(object);\n        dialogChatMenu.setDialogMenuListener(this);\n        dialogChatMenu.show();\n    }\n\n    @Override\n    public void requestStoragePermission() {\n        if (dialogMenuListener != null)\n            dialogMenuListener.requestStoragePermission();\n    }\n\n    @Override\n    public void pdfFileClicked(Uri pdfUri) {\n        if (dialogMenuListener != null)\n            dialogMenuListener.pdfFileClicked(pdfUri);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void onCopyMessageClicked(Object object) {\n        if (dialogMenuListener != null)\n            dialogMenuListener.onCopyMessageClicked(object);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void onResendMessageClicked(Object object) {\n        if (dialogMenuListener != null)\n            dialogMenuListener.onResendMessageClicked(object);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void onDeleteMessageClicked(Object object) {\n        if (dialogMenuListener != null)\n            dialogMenuListener.onDeleteMessageClicked(object);\n    }\n\n    @Override\n    public void systemSupportClicked() {\n        if (dialogMenuListener != null)\n            dialogMenuListener.onSupportClicked();\n    }\n\n    @Override\n    public void systemRateClicked() {\n        if (dialogMenuListener != null)\n            dialogMenuListener.onRateClicked();\n    }\n\n    RecyclerView.OnScrollListener scrollListener = new OnScrollListener() {\n        @Override\n        public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {\n            super.onScrolled(recyclerView, dx, dy);\n            if (recyclerView.getLayoutManager() == null)\n                return;\n            int visibleItemCount = recyclerView.getLayoutManager().getChildCount();\n            int totalItemCount = recyclerView.getLayoutManager().getItemCount();\n            int firstVisibleItemPosition = ((LinearLayoutManager) recyclerView.getLayoutManager()).findFirstVisibleItemPosition();\n            if ((visibleItemCount + firstVisibleItemPosition) >= totalItemCount) {\n                dialogMenuListener.shouldPaginateNow();\n            }\n        }\n    };\n\n    @Override\n    protected void onLayout(boolean changed, int l, int t, int r, int b) {\n        super.onLayout(changed, l, t, r, b);\n        int delta = b - t - this.oldHeight;\n        this.oldHeight = b - t;\n        if (delta < 0) {\n            this.scrollBy(0, -delta);\n        }\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chatkitlight/src/main/java/ir/vasl/chatkitlight/ui/view/ConversationList.java	(revision f4b7935ad3e9f2191d32424a910e0b8bfffeb0f9)
+++ chatkitlight/src/main/java/ir/vasl/chatkitlight/ui/view/ConversationList.java	(date 1615361873000)
@@ -70,7 +70,7 @@
         initViewModel();
     }
 
-    public void stopMediaPlayer(){
+    public void stopMediaPlayer() {
         adapter.stopMediaPlayer();
     }
 
@@ -85,7 +85,7 @@
         });
     }
 
-    public void scroll(int pos, long delay){
+    public void scroll(int pos, long delay) {
         new Handler().postDelayed(() -> scrollToPosition(pos), delay);
     }
 
